Search.setIndex({"docnames": ["ci_rvm", "ci_rvm/ci_rvm.ci_rvm", "ci_rvm/ci_rvm.test_ci_rvm", "hybrid_vector_model", "hybrid_vector_model/hybrid_vector_model.boater_movement_model", "hybrid_vector_model/hybrid_vector_model.hybrid_vector_model", "hybrid_vector_model/hybrid_vector_model.route_choice_model", "hybrid_vector_model/hybrid_vector_model.statsutils", "hybrid_vector_model/hybrid_vector_model.traveltime_model", "index", "lopaths", "lopaths/lopaths.graph", "lopaths/lopaths.graph_utils", "lopaths/lopaths.sig_fig_rounding", "lopaths/lopaths.test_graph", "lopaths/lopaths.test_routes", "vemomoto_core", "vemomoto_core/concurrent/vemomoto_core.concurrent.concurrent_futures_ext", "vemomoto_core/concurrent/vemomoto_core.concurrent.nicepar", "vemomoto_core/concurrent/vemomoto_core.concurrent.sharedmem_ext", "vemomoto_core/npcollections/vemomoto_core.npcollections.FixedOrderedIntDict", "vemomoto_core/npcollections/vemomoto_core.npcollections.intquickheapdict", "vemomoto_core/npcollections/vemomoto_core.npcollections.npext", "vemomoto_core/npcollections/vemomoto_core.npcollections.npextc", "vemomoto_core/npcollections/vemomoto_core.npcollections.sparse3d", "vemomoto_core/tools/vemomoto_core.tools.doc_utils", "vemomoto_core/tools/vemomoto_core.tools.hrprint", "vemomoto_core/tools/vemomoto_core.tools.iterext", "vemomoto_core/tools/vemomoto_core.tools.saveobject", "vemomoto_core/tools/vemomoto_core.tools.simprofile", "vemomoto_core/tools/vemomoto_core.tools.tee", "vemomoto_core/vemomoto_core.concurrent", "vemomoto_core/vemomoto_core.npcollections", "vemomoto_core/vemomoto_core.tools"], "filenames": ["ci_rvm.rst", "ci_rvm\\ci_rvm.ci_rvm.rst", "ci_rvm\\ci_rvm.test_ci_rvm.rst", "hybrid_vector_model.rst", "hybrid_vector_model\\hybrid_vector_model.boater_movement_model.rst", "hybrid_vector_model\\hybrid_vector_model.hybrid_vector_model.rst", "hybrid_vector_model\\hybrid_vector_model.route_choice_model.rst", "hybrid_vector_model\\hybrid_vector_model.statsutils.rst", "hybrid_vector_model\\hybrid_vector_model.traveltime_model.rst", "index.rst", "lopaths.rst", "lopaths\\lopaths.graph.rst", "lopaths\\lopaths.graph_utils.rst", "lopaths\\lopaths.sig_fig_rounding.rst", "lopaths\\lopaths.test_graph.rst", "lopaths\\lopaths.test_routes.rst", "vemomoto_core.rst", "vemomoto_core\\concurrent\\vemomoto_core.concurrent.concurrent_futures_ext.rst", "vemomoto_core\\concurrent\\vemomoto_core.concurrent.nicepar.rst", "vemomoto_core\\concurrent\\vemomoto_core.concurrent.sharedmem_ext.rst", "vemomoto_core\\npcollections\\vemomoto_core.npcollections.FixedOrderedIntDict.rst", "vemomoto_core\\npcollections\\vemomoto_core.npcollections.intquickheapdict.rst", "vemomoto_core\\npcollections\\vemomoto_core.npcollections.npext.rst", "vemomoto_core\\npcollections\\vemomoto_core.npcollections.npextc.rst", "vemomoto_core\\npcollections\\vemomoto_core.npcollections.sparse3d.rst", "vemomoto_core\\tools\\vemomoto_core.tools.doc_utils.rst", "vemomoto_core\\tools\\vemomoto_core.tools.hrprint.rst", "vemomoto_core\\tools\\vemomoto_core.tools.iterext.rst", "vemomoto_core\\tools\\vemomoto_core.tools.saveobject.rst", "vemomoto_core\\tools\\vemomoto_core.tools.simprofile.rst", "vemomoto_core\\tools\\vemomoto_core.tools.tee.rst", "vemomoto_core\\vemomoto_core.concurrent.rst", "vemomoto_core\\vemomoto_core.npcollections.rst", "vemomoto_core\\vemomoto_core.tools.rst"], "titles": ["Package: ci_rvm", "Module: ci_rvm.ci_rvm", "Module: ci_rvm.test_ci_rvm", "Package: hybrid_vector_model", "Module: hybrid_vector_model.boater_movement_model", "Module: hybrid_vector_model.hybrid_vector_model", "Module: hybrid_vector_model.route_choice_model", "Module: hybrid_vector_model.statsutils", "Module: hybrid_vector_model.traveltime_model", "VeMoMoTo - Vector Movement Modelling Tools", "Package: lopaths", "Module: lopaths.graph", "Module: lopaths.graph_utils", "Module: lopaths.sig_fig_rounding", "Module: lopaths.test_graph", "Module: lopaths.test_routes", "Namespace package: vemomoto_core", "Module: vemomoto_core.concurrent.concurrent_futures_ext", "Module: vemomoto_core.concurrent.nicepar", "Module: vemomoto_core.concurrent.sharedmem_ext", "Module: vemomoto_core.npcollections.FixedOrderedIntDict", "Module: vemomoto_core.npcollections.intquickheapdict", "Module: vemomoto_core.npcollections.npext", "Module: vemomoto_core.npcollections.npextc", "Module: vemomoto_core.npcollections.sparse3d", "Module: vemomoto_core.tools.doc_utils", "Module: vemomoto_core.tools.hrprint", "Module: vemomoto_core.tools.iterext", "Module: vemomoto_core.tools.saveobject", "Module: vemomoto_core.tools.simprofile", "Module: vemomoto_core.tools.tee", "Package: vemomoto_core.concurrent", "Package: npcollections", "Package: vemomoto_core.vemomoto_core.tools"], "terms": {"test_ci_rvm": [0, 9], "The": [0, 1, 3, 4, 5, 9, 10, 13, 16, 17, 19, 25, 28], "can": [0, 3, 4, 5, 9, 10, 16, 18, 19, 25, 28], "via": [0, 3, 5, 9, 10, 16, 25, 28], "pip": [0, 3, 9, 10, 16], "To": [0, 3, 5, 9, 10, 16], "you": [0, 3, 9, 10, 16, 25], "us": [0, 1, 3, 4, 5, 6, 9, 10, 11, 13, 14, 16, 18, 19, 25, 28], "most": [0, 5, 11], "conveni": [0, 3], "wai": 0, "algorithm": [0, 3, 5, 9, 10, 11], "i": [0, 1, 3, 4, 5, 7, 9, 10, 13, 14, 17, 19, 22, 23, 25, 28], "method": [0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 33], "find_ci": [0, 1, 2], "an": [0, 1, 3, 4, 5, 9, 13, 16, 17, 19, 22, 23, 28, 33], "exampl": [0, 3, 4, 5, 9, 16, 33], "below": [0, 5, 25], "find": [0, 1, 3, 5, 11], "profil": [0, 1, 5, 9, 16, 29, 33], "likelihood": [0, 1, 5, 6, 9], "confid": [0, 1, 5, 9], "interv": [0, 1, 4, 5, 9, 18], "neg": [0, 1, 5, 7], "binomi": [0, 5, 7], "model": [0, 3, 4, 5, 6], "we": [0, 3, 5], "import": [0, 3, 9, 25], "some": [0, 3, 4, 5, 9, 10, 28], "numpi": [0, 4, 5, 22, 23, 25], "np": [0, 5, 19], "numer": [0, 1, 5], "oper": [0, 3, 5, 19], "from": [0, 3, 5, 7, 13, 16, 19, 33], "scipi": [0, 5], "stat": [0, 5], "function": [0, 1, 2, 4, 5, 7, 8, 9, 12, 13, 14, 17, 18, 19, 22, 23, 24, 25, 28, 29], "optim": [0, 3, 4, 5, 9, 10, 14], "op": 0, "maxim": [0, 1, 4, 5, 13], "determin": [0, 1, 4, 5], "find_function_ci": [0, 1], "paramet": [0, 1, 3, 4, 5, 6, 7, 17, 19, 25, 28], "defin": [0, 3, 5, 14, 28], "size": [0, 4, 5, 7, 14, 16, 17, 18, 22, 23, 28, 32], "data": [0, 3, 5, 7, 8, 11, 14, 22, 23, 28, 30], "set": [0, 3, 5, 10, 17], "n": [0, 7, 8, 25, 26], "100": [0, 2, 7, 14], "true": [0, 1, 2, 4, 5, 6, 7, 8, 11, 13, 14, 15, 19, 22, 26, 28, 30], "k": [0, 5], "p": [0, 5, 6, 7], "5": [0, 1, 2, 4, 5, 11, 14, 15, 17], "0": [0, 1, 2, 3, 4, 5, 6, 7, 11, 14, 15, 19, 22, 24, 25], "1": [0, 1, 2, 3, 5, 8, 11, 13, 14, 15, 16, 17, 18, 22, 33], "gener": [0, 5, 17, 25], "random": [0, 5], "negative_binomi": 0, "becaus": [0, 3], "ar": [0, 1, 3, 4, 5, 9, 10, 14, 17, 18, 19, 28], "constrain": [0, 4, 5], "posit": [0, 1, 4, 5, 13, 19], "rang": 0, "respect": [0, 3, 5, 9, 13, 14], "work": [0, 3, 9, 10, 19, 28], "transform": [0, 4, 5], "space": [0, 4, 5, 16, 23, 32], "unbound": 0, "domain": [0, 4, 5], "def": [0, 25, 28], "transform_paramet": 0, "param": [0, 2], "return": [0, 1, 3, 4, 5, 7, 13, 17, 18, 19, 22, 23], "exp": 0, "log": [0, 1, 5], "logl": [0, 1], "nbinom": [0, 5], "logpmf": 0, "sum": [0, 16, 24, 32], "minim": [0, 1, 5, 19], "instead": [0, 3, 4, 5], "neglogl": 0, "lambda": 0, "initi": [0, 5, 6, 28], "guess": [0, 5, 6], "x0": [0, 1, 2, 5, 8], "result": [0, 1, 3, 5, 6, 9, 17, 18, 19], "print": [0, 1, 5, 6], "need": [0, 3, 5, 9, 10, 16], "origin": [0, 5, 22, 23, 28], "make": [0, 5, 28], "them": [0, 4, 5], "interpret": [0, 5], "estim": [0, 1, 5, 6], "3f": 0, "format": [0, 5, 25], "x": [0, 1, 2, 5, 7, 13, 14, 22], "95": [0, 1, 2, 5], "all": [0, 1, 3, 4, 5, 9, 13, 19, 28], "note": [0, 1, 3, 5, 10, 16, 28], "For": [0, 5, 9], "complic": 0, "problem": [0, 5], "worthwhil": 0, "do": [0, 5, 18], "thi": [0, 1, 3, 4, 5, 9, 10, 18, 19, 25, 28], "parallel": [0, 1, 3, 5, 9, 10, 18, 19], "howev": [0, 5], "would": [0, 3, 5], "encapsul": 0, "procedur": [0, 5, 25], "top": 0, "level": [0, 1, 15], "modul": [0, 3, 9], "ci": 0, "alpha": [0, 1, 2, 5], "disp": [0, 1, 2, 5, 6], "argument": [0, 1, 5, 13, 17, 18, 19, 25], "let": 0, "statu": [0, 1, 5], "messag": [0, 1], "2d": 0, "arrai": [0, 1, 4, 5, 13, 16, 22, 23, 32], "contain": [0, 4, 5, 9, 13, 28], "lower": [0, 1, 5], "bound": [0, 1, 4, 5], "th": [0, 1], "upper": [0, 1, 5, 13], "back": [0, 19], "original_low": 0, "original_upp": 0, "now": 0, "myfunct": 0, "comput": [0, 1, 3, 4, 5, 10], "gradient": [0, 1], "hessian": [0, 1], "necessari": [0, 3, 4, 5, 28], "computation": 0, "expens": 0, "If": [0, 1, 3, 4, 5, 6, 9, 10, 17, 19, 25, 28], "want": 0, "have": [0, 3, 4, 5, 9, 10, 25, 28], "full": [0, 5], "control": [0, 1, 3, 5, 9, 19, 25], "over": [0, 25], "manual": 0, "numdifftool": [0, 1], "nd": 0, "jac": [0, 1, 2], "hess": [0, 1, 2], "theori": [0, 3], "behind": [0, 3, 25], "implement": [0, 3, 4, 5, 9, 10, 11, 18], "explain": [0, 3, 10], "paper": [0, 3, 9, 10], "A": [0, 3, 5, 17, 28], "robust": 0, "effici": [0, 5, 11, 24], "pleas": [0, 3, 5, 9, 10, 16], "cite": [0, 3, 9, 10], "your": [0, 3, 10, 25], "own": [0, 3, 10], "research": [0, 3, 10], "class": [1, 2, 3, 4, 5, 6, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 33], "counterfun": 1, "fun": [1, 2], "sourc": [1, 2, 4, 5, 6, 7, 8, 11, 13, 14, 15, 17, 18, 19, 22, 24, 25, 26, 27, 28, 29, 30], "base": [1, 2, 4, 5, 6, 8, 9, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30], "object": [1, 2, 5, 8, 11, 13, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30], "count": [1, 5, 17], "how": [1, 3, 4, 5, 9], "often": [1, 5], "ha": [1, 5, 13, 28], "been": [1, 5, 9, 28], "call": [1, 3, 17, 19], "flexiblesubproblem": 1, "hessp": 1, "none": [1, 2, 4, 5, 6, 7, 8, 11, 14, 15, 17, 18, 19, 22, 24, 26, 28], "k_easi": 1, "k_hard": 1, "2": [1, 2, 3, 4, 5, 11, 14, 16, 22, 33], "repres": [1, 3, 5, 11], "constain": 1, "quadrat": 1, "subproblem": 1, "solv": [1, 5], "radiu": 1, "positivedefinit": 1, "tol": [1, 2], "1e": [1, 2, 5, 22], "05": [1, 6, 12, 22, 23, 24], "jac0tol": 1, "arg": [1, 5, 11, 14, 17, 18, 29], "kwarg": [1, 5, 11, 14], "flipper": 1, "index": [1, 2, 5, 9, 22], "which": [1, 3, 4, 5, 9, 13, 25, 28], "should": [1, 5, 9], "flip": 1, "specifi": [1, 3, 5, 25, 28], "compon": 1, "indic": [1, 2, 4, 5, 22], "direct": [1, 2], "fals": [1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 18, 19, 22, 25, 26, 28], "return_full_result": 1, "return_success": 1, "": [1, 3, 4, 5, 9, 13], "one": [1, 5, 7, 9, 17, 22, 23], "multipl": [1, 5, 25], "float": [1, 4, 5, 6, 13], "maximum": [1, 5, 6, 17], "mle": [1, 2, 5], "paramt": [1, 5], "callabl": [1, 5, 17, 19], "finit": 1, "differ": [1, 5, 9, 11, 25], "int": [1, 4, 5, 25], "interest": [1, 3, 4, 5], "given": [1, 3, 4, 5, 17, 25, 29], "consid": [1, 2, 3, 4, 5, 16, 23, 32], "search": [1, 5, 9], "both": [1, 3, 5, 25], "end": [1, 5, 26], "point": [1, 5, 13], "scalar": 1, "onli": [1, 3, 4, 5, 9, 10, 13, 18, 22, 23, 25, 28], "otherwis": [1, 5, 6, 25], "row": [1, 5, 22], "entri": [1, 4, 5], "desir": [1, 5], "wherea": 1, "must": [1, 3, 4, 5, 13, 19, 22, 23, 25], "bool": [1, 4, 5, 6, 25, 28], "multiprocess": [1, 2], "pool": [1, 17], "requir": [1, 3, 5, 9, 18], "pickabl": 1, "optimizeresult": 1, "each": [1, 3, 5, 13, 19], "question": 1, "same": [1, 4, 5, 13, 18, 19, 28], "shape": [1, 16, 23, 32], "addit": [1, 2, 5, 11, 14, 28], "whether": [1, 5, 6, 28], "wa": [1, 5], "successfulli": 1, "keyword": [1, 5, 13], "other": [1, 5, 9, 16, 24, 33], "pass": [1, 5, 17, 18], "find_ci_bound": [1, 5], "look": 1, "document": [1, 3, 5, 9, 16, 33], "fun0": [1, 2], "jac0": 1, "hess0": [1, 2], "customtarget": 1, "nmax": [1, 2], "200": [1, 2], "ncheck": 1, "65": 1, "apprxtol": 1, "resulttol": [1, 2], "001": [1, 2, 5, 15], "singtol": 1, "0001": 1, "minstep": 1, "radiusfactor": 1, "infstep": [1, 2], "10000000000": [1, 2], "maxradiu": 1, "10000": 1, "track_x": [1, 2], "track_f": 1, "sought": [1, 5], "els": 1, "liekelihood": 1, "custom": [1, 3], "target": [1, 2], "l": 1, "ignor": [1, 5, 18, 25], "number": [1, 4, 5, 7, 11, 13, 17, 19], "iter": [1, 5, 7, 17], "trust": 1, "region": [1, 5], "chang": [1, 5, 25, 28], "per": [1, 5, 22, 23], "rel": [1, 5], "toler": 1, "between": [1, 3, 4, 5], "its": [1, 5], "approxim": [1, 3, 5], "norm": 1, "singular": 1, "check": [1, 5], "quickli": 1, "decreas": 1, "stepsiz": 1, "after": [1, 5, 25, 28], "deem": [1, 3, 5], "unestimbal": 1, "rradiu": 1, "last": [1, 3], "trace": 1, "functionjac": 1, "functionhess": 1, "logljac": 1, "loglhess": 1, "relativeerror": 1, "shall": [1, 3, 4, 5, 6, 10, 25, 28], "permit": [1, 5], "error": [1, 5], "get_independent_row_indic": 1, "m": 1, "matrix": 1, "order": [1, 5, 17, 18, 19], "vector": [1, 3, 4, 5], "boolean": [1, 5, 19], "linearli": 1, "independ": [1, 3], "arr": [1, 5, 18, 22, 23], "j": 1, "provid": [1, 3, 4, 5, 9, 17, 25], "depend": [1, 3, 5, 9], "is_negative_definit": 1, "definit": [1, 25], "choleski": 1, "decomposit": 1, "creat": [2, 3, 5, 6, 7, 9, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30], "18": [2, 30], "09": 2, "2019": [2, 13], "author": [2, 6, 7, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30], "samuel": [2, 6, 7, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30], "basetest": 2, "attribut": [2, 4, 5, 6, 20, 22, 23, 28], "properti": [2, 5, 6], "convertpo": 2, "convertposinv": 2, "get_fun": 2, "dynamicalsystemtest": 2, "sim_arg": 2, "sim_kwarg": 2, "static": [2, 4, 5, 14, 15, 20, 22, 23, 25], "f_constr": 2, "f": [2, 14, 18], "t": [2, 8], "y": [2, 5], "dim": 2, "fact": [2, 14], "f_prime": 2, "get_funs_constr": 2, "get_rss": 2, "rss_dyn": 2, "simul": [2, 5], "datan": 2, "50": 2, "tend": [2, 8], "20": [2, 4, 5, 15], "std": 2, "3": [2, 4, 5, 9, 11, 24], "plot": [2, 5, 8, 14], "h14tester": 2, "fix": 2, "val": [2, 5], "25": [2, 29], "logregresstest": 2, "seed": 2, "1000": [2, 5], "testdatan": 2, "power": 2, "mode": [2, 7, 19], "simulate_": 2, "trackfun": 2, "benchmark": 2, "nsim": 2, "simkwarg": 2, "benchmark_": 2, "binsearch": 2, "initstep": 2, "stepn": 2, "checkno": 2, "bisect": 2, "fun_": 2, "constrainedmin": 2, "constrained_max": 2, "nit": 2, "500": [2, 4], "convert": [2, 4, 5], "convertposinv_": 2, "convertpos_": 2, "create_plot": 2, "tester": 2, "rvm": 2, "filenam": [2, 5, 6, 8, 14, 15, 28], "f_track": 2, "printci": 2, "fixedfun": 2, "origarg": 2, "flex": 2, "gridsearch": 2, "step": [2, 5], "mixed_min": 2, "root": 2, "df": 2, "sane": 2, "test_h14": 2, "test_logregress": 2, "test_logregress_pr": 2, "test_dynamical_system": 2, "test_find_ci": 2, "venzon_moolgavkar": 2, "epsilon": 2, "06": [2, 5, 6, 7, 22, 30], "wald": 2, "route_choice_model": [3, 9], "statsutil": [3, 9], "traveltime_model": [3, 5, 9], "boater_movement_model": [3, 9], "compil": [3, 9, 10, 16], "mai": [3, 4, 5, 9, 10, 16, 17, 25], "refer": [3, 5, 9, 10, 16], "section": [3, 5, 10, 14, 16, 25, 28], "main": [3, 10, 16], "page": [3, 9, 10, 16], "detail": [3, 5, 9], "optimizi": [3, 9], "includ": [3, 5, 9], "commerci": [3, 9], "softwar": [3, 9], "mosek": [3, 5, 9], "see": [3, 4, 5, 9], "instruct": [3, 9], "reli": [3, 9, 10], "share": [3, 9, 10], "memori": [3, 9, 10], "librari": [3, 9, 10, 13], "unix": [3, 9, 10], "system": [3, 9, 10], "hybrid": [3, 5, 9], "appli": [3, 4, 5, 9, 19], "larg": [3, 5, 9, 10, 28], "sytem": [3, 9], "strongli": [3, 9, 10, 28], "encourag": [3, 9, 10], "execut": [3, 5, 9, 10, 18], "code": [3, 5, 9, 10], "linux": [3, 9, 10], "task": [3, 5, 9, 10], "run": [3, 9, 10], "window": [3, 9, 10], "hybridvectormodel": [3, 5], "new": [3, 5, 14, 15, 16, 20, 22, 23, 25, 32], "take": [3, 5, 17], "sever": 3, "file": [3, 4, 5, 28, 30], "input": [3, 5], "fit": [3, 4, 5, 6], "sinc": 3, "covari": [3, 4, 5], "traffic": [3, 5], "incent": 3, "repuls": [3, 5], "donor": 3, "attract": [3, 4, 5], "recipi": 3, "vari": 3, "travel": [3, 4, 5], "here": [3, 5, 25], "factor": [3, 4, 5, 22], "inherit": [3, 5, 16, 33], "basetrafficfactormodel": [3, 4, 5], "proport": [3, 4, 5], "list": [3, 5, 17, 18, 19], "In": [3, 4, 5, 19], "boater": [3, 4, 5], "jurisdict": [3, 4, 5], "lake": [3, 4, 5], "found": [3, 9], "help": [3, 5, 9], "when": [3, 4, 5, 19, 25, 28], "build": 3, "conclus": 3, "could": [3, 5, 17], "follow": [3, 5], "o": [3, 9], "better": 3, "tailor": 3, "trafficfactormodel": [3, 4, 5], "reus": [3, 5], "earlier": [3, 5, 28], "possibl": [3, 5], "restart": [3, 5, 14, 15], "declar": [3, 25], "name": [3, 4, 5, 11, 22, 23, 28], "assum": [3, 5], "subdirectori": [3, 5], "merg": [3, 16, 25, 33], "accordingli": [3, 5], "descript": [3, 5, 25], "content": [3, 5], "folder": [3, 28], "filenameedg": [3, 5, 14, 15], "path": [3, 5, 10, 11, 28], "join": 3, "edg": [3, 11], "csv": [3, 5], "filenamevertic": [3, 5, 15], "vertic": [3, 5, 11], "filenameorigin": [3, 5], "populationdata": 3, "filenamedestin": [3, 5], "lakedata": 3, "filenamepostalcodearea": [3, 5], "postalcodearea": 3, "filenameobserv": [3, 5], "surveydata": 3, "complianc": [3, 5], "rate": [3, 5], "fraction": [3, 5], "who": [3, 5], "stop": [3, 5], "survei": [3, 5], "locat": [3, 5, 8, 14], "compli": 3, "typic": 3, "cannot": [3, 5], "directli": [3, 5], "therefor": [3, 5], "compliancer": [3, 5, 6], "8": [3, 5, 11], "filenamesav": 3, "These": [3, 5, 9, 28], "rout": [3, 5, 6, 9, 10], "like": [3, 5, 13, 25], "first": [3, 5], "much": [3, 5], "admiss": [3, 5], "longer": [3, 5], "than": [3, 5, 17, 22], "shortest": [3, 5, 11], "second": [3, 5, 17], "length": [3, 4, 5, 17, 19], "subpath": 3, "total": [3, 5], "restrict": [3, 13], "two": [3, 5, 13, 25], "intern": [3, 5], "choos": [3, 5], "case": [3, 5], "yield": [3, 5], "exact": [3, 5], "routeparamet": [3, 5], "4": [3, 11], "filenamebackup": [3, 5], "trafficfactormodel_class": [3, 5], "also": [3, 5, 9, 28], "subfold": [3, 4], "altern": [3, 5, 11], "download": 3, "github": [3, 9, 13], "repositori": 3, "There": 3, "graphic": 3, "imag": 3, "road": [3, 5, 9, 10], "network": [3, 5, 9, 10], "graviti": [3, 4, 5], "choic": [3, 5, 6, 10], "assess": [3, 5, 9], "scale": [3, 5, 7], "inspect": [3, 5, 19], "station": [3, 5], "describ": [3, 4, 5], "manag": [3, 18], "aquat": [3, 5], "invas": [3, 5, 9], "time": [3, 5, 14, 17], "watercraft": 3, "correspond": [3, 4, 5, 9], "origindata": 4, "destinationdata": 4, "postalcodeareadata": [4, 5], "distanc": [4, 5], "postalcodedist": [4, 5], "mean": [4, 5], "flow": [4, 5, 19], "2000": [4, 11], "7": [4, 9], "10": [4, 5, 14], "reason": [4, 5, 19], "befor": [4, 5, 9, 17, 25], "convers": [4, 5], "match": [4, 5], "destination_covari": [4, 5], "area": [4, 5, 14], "doubl": [4, 5, 22], "perimet": 4, "campground": 4, "pointsofinterest": 4, "marina": 4, "popul": [4, 5], "str": [4, 5, 25, 28], "type": [4, 5, 13, 17, 19, 25], "sink": [4, 5], "label": [4, 5], "expon": [4, 5, 6], "poi": 4, "surround": 4, "pca": 4, "pc": 4, "angler": 4, "canadian": 4, "dtype": [4, 5, 11, 18, 22], "u31": 4, "origin_covari": [4, 5], "spcifi": [4, 5], "default": [4, 5, 11, 22], "permut": [4, 5], "combin": [4, 5, 25], "select": [4, 5], "column": [4, 5, 22, 23], "22": 4, "convert_paramet": [4, 5], "dynamicparamet": [4, 5], "parametersconsid": [4, 5], "standard": [4, 5], "Not": [4, 5], "avoid": [4, 5, 19], "overfit": [4, 5], "furthermor": [4, 5, 9, 28], "within": [4, 5], "certain": [4, 5], "valu": [4, 5, 13, 16, 17, 18, 19, 20, 27, 28, 32], "free": [4, 5], "held": [4, 5], "constant": [4, 5], "exactli": [4, 5], "mani": [4, 5, 17, 25], "get_mean_factor": [4, 5], "pair": [4, 5], "NOT": [4, 5], "id": [4, 5], "get_mean_factor_autograd": [4, 5], "autograd": [4, 5], "deriv": [4, 5], "automat": [4, 5, 28], "differenti": [4, 5], "process_sink_covari": [4, 5], "process": [4, 5, 17, 18, 19], "save": [4, 5, 14, 15, 28], "thei": [4, 5, 9, 17, 19, 28], "show": [4, 5, 6, 8, 14, 15], "program": 5, "motiv": 5, "potenti": [5, 11], "carri": [5, 25], "speci": [5, 9], "nonetheless": 5, "tool": [5, 16], "applic": [5, 25], "ani": [5, 17, 19, 28], "due": 5, "word": 5, "place": [5, 28], "still": [5, 9], "specif": 5, "scenario": 5, "agent": 5, "simpli": 5, "destin": 5, "sourcedata": 5, "sinkdata": 5, "overwrit": [5, 11, 28], "variabl": [5, 9], "later": 5, "struct": 5, "postal": 5, "float64": 5, "overwritten": [5, 25, 28], "rais": [5, 17, 19], "write": [5, 16, 18, 28, 30, 33], "copi": [5, 11, 22, 23, 25], "exchang": 5, "ag": 5, "support": [5, 11, 22], "compat": 5, "less": 5, "greater": [5, 17], "concern": [5, 25], "just": 5, "alreadi": 5, "leav": 5, "untouch": [5, 28], "process_source_covari": 5, "cpu_count": [5, 11], "destinationtodestin": 5, "printerarg": [5, 6, 11, 15], "hierarchichalprint": [5, 6, 11, 16, 26, 33], "separatelysav": [5, 11, 16, 28, 33], "bring": 5, "compoent": 5, "togeth": 5, "analyz": 5, "without": [5, 9, 14, 25, 28], "extens": [5, 9, 28], "yet": [5, 9, 22], "extent": 5, "allow": [5, 22, 23, 25], "tupl": [5, 13, 19], "hierarch": 5, "printer": 5, "ingener": 5, "check_count_distributions_nb": 5, "mindatasets": 5, "observ": [5, 6, 7], "normal": 5, "distribut": [5, 7, 9], "test": [5, 9, 11, 14], "null": 5, "hypothesi": 5, "h0": 5, "high": 5, "reject": 5, "conclud": 5, "appropri": 5, "It": [5, 19], "part": [5, 9, 28], "ident": [5, 28], "sampl": [5, 7, 8], "enough": 5, "compare_distribut": 5, "stationid": 5, "fromid": [5, 11], "toid": [5, 11], "xmax": 5, "savefilenam": 5, "compar": [5, 28], "oberv": 5, "anderson": 5, "darl": 5, "predict": [5, 7], "cumulit": 5, "mass": 5, "idtyp": 5, "where": [5, 14], "collect": [5, 9, 19, 22, 23], "up": 5, "probabl": 5, "least": [5, 7], "compare_travel_time_distribut": 5, "conduct": 5, "ratio": 5, "evalu": [5, 17], "equal": 5, "best": 5, "local": [5, 9, 10, 29], "long": 5, "create_budget_plot": 5, "minbudget": 5, "maxbudget": 5, "nstep": 5, "optim_kwarg": 5, "success": 5, "price": 5, "invest": 5, "budget": 5, "optimize_inspection_station_oper": 5, "create_caracteristic_plot": 5, "characterist": 5, "characteristicnam": 5, "valuenam": 5, "polici": 5, "while": 5, "against": 5, "expect": 5, "infest": 5, "whose": [5, 18], "impact": 5, "studei": 5, "self": [5, 18, 28], "studi": 5, "axi": [5, 24], "legend": 5, "create_quality_plot": 5, "worstlabelno": 5, "comparisonfilenam": 5, "v": 5, "largest": 5, "devianc": 5, "load": [5, 28], "comparison": 5, "todo": 5, "speed": 5, "significatnli": 5, "incorpor": 5, "create_road_network": 5, "preprocessingarg": [5, 14, 15], "edgelengthrandom": [5, 15], "preprocess": [5, 11, 14], "header": [5, 25], "separ": [5, 28], "field": [5, 22, 23], "vertex": 5, "start": [5, 19, 25], "lenght": 5, "forward": 5, "option": [5, 19], "backward": 5, "access": [5, 22, 24, 28], "state": 5, "intermedi": 5, "reduc": [5, 19], "complex": 5, "identifi": [5, 9], "center": 5, "role": 5, "lopath": [5, 9], "graph": [5, 9, 10], "flowpointgraph": [5, 11, 14], "further": [5, 28], "perturb": 5, "distinct": 5, "create_route_choice_model": 5, "redo": 5, "refit": 5, "previou": 5, "create_travel_time_model": 5, "trafficdensityvonmis": [5, 8], "densiti": 5, "under": [5, 7, 9], "pdf": [5, 8], "png": 5, "find_potential_rout": 5, "stretchconst": [5, 11, 14, 15], "localoptimalityconst": [5, 11, 14], "acceptionfactor": [5, 11, 14], "667": 5, "rejectionfactor": [5, 11, 14], "333": 5, "find_locally_optimal_path": [5, 11], "relat": 5, "infin": 5, "relax": 5, "constraint": 5, "accept": [5, 13, 19], "perform": 5, "feasibl": 5, "twice": 5, "smallest": 5, "find_shortest_dist": [5, 12], "centr": 5, "transportnetwork": [5, 15], "fit_flow_model": 5, "flowparamet": 5, "continueflowoptim": 5, "get_ci": 5, "candid": 5, "aic": 5, "repeat": [5, 16, 27, 33], "dict": 5, "dictionari": [5, 27], "kei": [5, 16, 20, 22, 32], "solut": 5, "fit_route_choice_model": 5, "improveguess": [5, 6], "partial": [5, 6], "get_pmf_observation_predict": 5, "getbestpmf": 5, "getpureobserv": 5, "come": [5, 25], "pure": 5, "get_normalized_observation_predict": 5, "minsamples": 5, "therebi": 5, "so": [5, 9, 13], "obtain": [5, 9], "daytim": 5, "ensur": [5, 18], "individu": [5, 9], "ad": [5, 25], "shift": [5, 28], "avail": [5, 9], "too": 5, "low": 5, "get_pair_distribution_properti": 5, "dist_properti": 5, "rv_gener": 5, "_discrete_distn": 5, "nbinom_gen": 5, "shiftstart": [5, 8], "shiftend": [5, 8], "quantil": [5, 7], "ppf": 5, "fromindex": [5, 11], "toindex": [5, 11], "24": 5, "24h": 5, "That": 5, "14": 5, "30pm": 5, "neglect": 5, "complet": [5, 9], "daili": 5, "stationindex": 5, "get_pair_observation_predict": 5, "anew": 5, "get_station_mean_vari": 5, "stationindic": 5, "getstationresult": 5, "getpairresult": 5, "fullcompli": 5, "correctdata": 5, "vairanc": 5, "either": 5, "were": 5, "mention": 5, "dai": 5, "made": [5, 28], "more": 5, "onc": 5, "reconsid": 5, "teh": 5, "magnitud": 5, "get_station_observation_predict": 5, "investigate_profile_likelihood": 5, "processedsurveydata": 5, "lengthsofpotentialrout": 5, "routechoiceparamet": 5, "properdatar": [5, 6], "approximationnumb": 5, "profile_ll_arg": 5, "preprocess_survey_data": 5, "csr_matrix_nd": [5, 16, 22, 32], "e": 5, "strength": 5, "inadmiss": 5, "prefer": 5, "shorter": 5, "third": 5, "suvei": 5, "randomli": [5, 6], "inconsist": 5, "incomplet": 5, "wrong": 5, "proportion": 5, "q": 5, "degre": 5, "taylor": 5, "higher": [5, 22], "precis": [5, 13], "maximize_log_likelihood": 5, "being": 5, "Will": 5, "maximize_log_likelihood_stat": 5, "considerinfest": 5, "restartarg": 5, "construct": [5, 9], "present": 5, "coincid": 5, "inform": 5, "g": 5, "live": 5, "actual": 5, "hundret": 5, "thousand": 5, "etc": 5, "date": 5, "relev": 5, "translat": 5, "miss": 5, "unknown": 5, "tempor": 5, "left": [5, 8], "blank": 5, "set_origins_consid": 5, "iff": 5, "easili": 5, "scratch": 5, "even": 5, "earler": 5, "construt": 5, "_____________________________": 5, "readorigindata": 5, "read": [5, 18, 28], "readdestinationdata": 5, "readpostalcodeareadata": 5, "readroadnetwork": 5, "findshortestdist": 5, "boold": 5, "readsurveydata": 5, "infer": 5, "fittraveltimemodel": 5, "traveltimeparamet": 5, "rather": 5, "known": 5, "preprocesssurveydata": 5, "prepar": [5, 6], "findpotentialrout": 5, "might": 5, "fitroutechoicemodel": 5, "assign": 5, "continueroutechoiceoptim": 5, "preaparetrafficfactormodel": 5, "fitflowmodel": 5, "continuetrafficfactoroptim": 5, "costshift": 5, "costsit": 5, "costbound": 5, "shiftlength": 5, "nightpremium": 5, "allowedshift": 5, "costroundcoeff": 5, "basetimeinv": 5, "ignorerandomflow": 5, "integ": [5, 13, 19], "timeout": [5, 17], "fancyround": 5, "full_result": 5, "extended_info": 5, "init_greedi": 5, "savefil": 5, "loadfil": 5, "filenameaddit": 5, "well": 5, "discret": 5, "effort": 5, "scheme": 5, "instal": [5, 11], "linear": 5, "cvxpy": 5, "solver": 5, "By": 5, "interfac": 5, "did": 5, "condit": [5, 7, 9], "featur": 5, "recommend": 5, "pach": 5, "cvxpy_chang": 5, "design": 5, "replac": [5, 9, 25], "cost": 5, "site": 5, "overal": 5, "measur": 5, "overnight": 5, "nightcost": 5, "wherebi": 5, "denot": [5, 7], "practic": 5, "increas": 5, "overlap": 5, "unit": 5, "round": [5, 13], "approach": 5, "significantli": 5, "inadmissib": 5, "nois": 5, "add": [5, 16, 22, 23, 25, 32], "uncertainti": [5, 13], "lead": 5, "greedi": 5, "faster": [5, 28], "guarante": 5, "routin": 5, "slightli": 5, "effect": 5, "tie": 5, "break": 5, "sophist": 5, "cover": 5, "accord": 5, "conjunct": 5, "whetehr": 5, "prepare_traffic_factor_model": 5, "raw": 5, "had": 5, "done": 5, "read_destination_data": 5, "read_origin_data": 5, "read_postal_code_area_data": 5, "read_survey_data": 5, "prunestarttim": 5, "11": [5, 20, 21, 29], "pruneendtim": 5, "16": 5, "extend": [5, 16, 22, 23, 32], "analysi": 5, "frame": 5, "give": 5, "chosen": 5, "entir": [5, 17, 25, 28], "unifi": 5, "vmm": 5, "save_model_predict": 5, "save_simulated_observ": 5, "shiftnumb": 5, "daynumb": 5, "stationset": 5, "simultan": 5, "set_compliance_r": 5, "set_infest": 5, "originid": 5, "cheng": 5, "happen": 5, "jursidict": 5, "set_traffic_factor_model_class": 5, "simulate_count_data": 5, "stationtim": 5, "limittooneobserv": 5, "test_1_1_regress": 5, "bias": 5, "unbias": 5, "unabl": 5, "di": 5, "good": 5, "job": 5, "depict": 5, "s11": 5, "9": [5, 11, 14], "diget": 5, "remain": [5, 28], "reserv": 5, "represent": 5, "contrast": 5, "movement": 5, "vemomoto_cor": [5, 9], "hrprint": [5, 9, 16, 33], "queri": 5, "prerequisit": 5, "reach": 5, "highwai": 5, "update_sources_consid": 5, "rawconsid": 5, "mechan": 5, "benefici": [5, 28], "current": 5, "create_distribution_plot": 5, "ylabel": 5, "pmf": 5, "titl": 5, "cumul": 5, "non": [5, 19], "parametr": 5, "create_observed_predicted_mean_error_plot": 5, "consterror": 5, "errorfunct": 5, "regressionresult": 5, "comparisonpredict": 5, "comparisonobserv": 5, "logscal": 5, "deviat": 5, "abov": 5, "line": [5, 25], "shade": 5, "figur": [5, 13, 14], "repsect": 5, "slope": 5, "intercept": 5, "regress": 5, "create_observed_predicted_mean_error_plot_from_fil": 5, "filename1": [5, 28], "filename2": [5, 28], "primari": 5, "mean_relative_absolute_error": 5, "cutoff": 5, "absolut": [5, 26], "threshold": 5, "nbinom_fit": 5, "redraw_predicted_observ": 5, "redraw": 5, "versu": 5, "safe_delattr": 5, "obj": [5, 28], "attrnam": 5, "delet": 5, "exist": [5, 16, 22, 23, 28, 32], "21": 6, "2018": 6, "routechoicemodel": 6, "classdoc": [6, 17, 19, 22, 23, 26], "noisebound": 6, "variable_label": 6, "drive": 6, "get_confidence_interv": 6, "optim_arg": 6, "get_nll_funt": 6, "set_fitting_data": 6, "daydata": 6, "shiftdata": 6, "inspectedrout": 6, "routelength": 6, "trafficmodel": 6, "13": 7, "2017": [7, 17], "r2": 7, "anderson_darling_nb": 7, "poissonlimit": 7, "psamples": 7, "bootstrapn": 7, "400": 7, "bootstrapn_p": 7, "mhstep": 7, "usepreviouspv": 7, "usepreviouspsampl": 7, "resultsav": 7, "global": [7, 29], "__presult": 7, "__adresult": 7, "__psampleresult": 7, "maxsiz": 7, "anderson_darling_p": 7, "counter": [7, 11, 16, 18, 31], "anderson_darling_test_discret": 7, "modelx": 7, "simulate_p_valu": 7, "vonmises_logpdf": 7, "kappa": [7, 8], "loc": [7, 29], "zero_truncated_nb": 7, "999": 7, "element": [7, 13, 25], "nonzero": 7, "metropoli": 7, "hast": 7, "basetrafficdensitydaytim": 8, "interval_prob": 8, "tstart": 8, "maximize_likelihood": 8, "obstim": 8, "ineqconstr": 8, "neg_log_likelihood": 8, "coeffici": 8, "scalingfactor": 8, "trafficdensitydaytime_plinear": 8, "tmin": 8, "tmax": 8, "intervalnumb": 8, "trafficdensitydaytime_stepfun": 8, "getci": 8, "coeff": 8, "norminterv": 8, "cropdata": 8, "right": 8, "fitestim": 8, "readtimedata": 8, "delimit": 8, "missing_valu": 8, "crop": 8, "python": [9, 13], "packag": [9, 13], "aim": 9, "diseas": 9, "through": 9, "hybrid_vector_model": 9, "core": [9, 11], "ci_rvm": 9, "particular": [9, 25], "addedd": 9, "renam": 9, "futur": 9, "version": 9, "notic": 9, "cautiou": 9, "earli": 9, "project": 9, "c": 9, "64": 9, "bit": 9, "precompil": 9, "platform": 9, "anaconda": 9, "satisfi": 9, "conda": 9, "gxx_linux": 9, "cmake": 9, "32": 9, "machin": 9, "mac": 9, "clangxx_osx": 9, "subpag": 9, "warn": 9, "displai": 9, "upon": 9, "term": 9, "lgpl": 9, "v3": 9, "publish": 9, "journal": 9, "link": 9, "ticket": 9, "invit": 9, "fork": 9, "graph_util": [9, 10], "sig_fig_round": [9, 10], "test_graph": [9, 10], "test_rout": [9, 10], "concurr": [9, 16], "concurrent_futures_ext": [9, 16, 31], "nicepar": [9, 16, 31], "sharedmem_ext": [9, 16, 31], "npcollect": [9, 16], "fixedorderedintdict": [9, 16, 32], "intquickheapdict": [9, 16, 32], "npext": [9, 16, 32], "npextc": [9, 16, 32], "sparse3d": [9, 16, 32], "iterext": [9, 16, 33], "saveobject": [9, 16, 33], "simprofil": [9, 16, 33], "tee": [9, 16, 33], "doc_util": [9, 16, 33], "cpu": [11, 17], "fastgraph": 11, "flexiblegraph": 11, "add_edg": 11, "edgedata": 11, "add_edge_attribut": 11, "fillval": [11, 22], "add_vertex": 11, "vertexdata": 11, "add_vertex_attribut": 11, "make_edges_contigu": 11, "remove_edg": 11, "remove_vertex": 11, "vertexindex": 11, "replacementmod": 11, "lengthlabel": 11, "significancelabel": 11, "defaultvertexdata": 11, "defaultedgedata": 11, "flexibl": 11, "structur": [11, 22, 23], "remov": [11, 22, 23], "vertexid": 11, "get_edge_count": 11, "get_edge_data": 11, "get_neighbor_edg": 11, "getsuccessor": 11, "get_predecessor": 11, "get_successor": 11, "get_vertex_count": 11, "get_vertex_data": 11, "remove_insignificant_dead_end": 11, "standardsignific": 11, "set_default_edge_data": 11, "set_default_vertex_data": 11, "set_edge_data": 11, "set_vertex_data": 11, "lockabl": [11, 16, 18, 31], "find_alternative_path": 11, "fromindic": 11, "toindic": 11, "shortestdist": 11, "find_shortest_distance_arrai": 11, "find_shortest_path": [11, 12], "getpath": 11, "inits": 11, "initialbound": 11, "boundfactor": 11, "prunefactor": 11, "additionalboundfactor": 11, "expansionbound": 11, "degreebound": 11, "maxedgelength": 11, "07": [12, 13, 19, 22, 23, 24, 26, 27], "2016": [12, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30], "in_set": 12, "retriev": 13, "08": 13, "http": 13, "com": 13, "odysseus9672": 13, "selpythonlib": 13, "blob": 13, "master": 13, "sigfiground": 13, "py": 13, "formatvaltosigfig": 13, "sigfig": 13, "sciformat": 13, "signific": 13, "string": [13, 25], "forc": 13, "scientif": 13, "notat": 13, "store": [13, 24], "real": 13, "formatvalwithuncround": 13, "unc": 13, "uncsigfig": 13, "Then": 13, "decim": 13, "pace": 13, "accuraci": 13, "roundtosigfigs_decim": 13, "logarithm": 13, "slower": 13, "No": 13, "roundtosigfigs_fp": 13, "setdecimalprecis": 13, "valuewithuncsround": 13, "graphtest": 14, "get_origin_destination_indic": 14, "sourceno": 14, "sinkno": 14, "trialindex": 14, "test_revc_loc": 14, "test_revc_approxim": 14, "sosino": 14, "repetit": 14, "test_revc_onc": 14, "test_revc_rang": 14, "test_revc_range_avg": 14, "test_revc_repetit": 14, "printresult": 14, "test_revc_source_sink": 14, "pairbas": 14, "test_revc_stretch": 14, "test_optim": 14, "adjust_tick": 14, "xtick": 14, "ytick": 14, "hidemid": 14, "ax": 14, "arrstr": 14, "iterarg": 14, "create_min_paths_graph": 14, "xlabel": 14, "maxpathbound": 14, "30": 14, "xlim": 14, "colorbar": 14, "create_min_paths_graph2": 14, "split_figure_vert": 14, "figsize_1": 14, "additional_width": 14, "rect_1": 14, "rect_2": 14, "color": 14, "bar": 14, "width": 14, "time_cal": 14, "03": [15, 17], "2020": 15, "routetest": 15, "test_empirical_valid": 15, "filenamedata": 15, "additionalst": 15, "02": 15, "colorcycl": 15, "processpoolexecutor": [16, 17, 31], "get_shared_arrai": [16, 17, 31], "map": [16, 17, 19, 31], "get_cpu_chunk_count": [16, 17, 31], "circularparallelcount": [16, 18, 31], "next": [16, 18, 28, 31], "reset": [16, 18, 31], "dummyobj": [16, 18, 31], "updat": [16, 18, 31], "dummyvar": [16, 18, 31], "lock": [16, 18, 31], "parallelclass": [16, 18, 31], "parmap": [16, 18, 31], "postpone_task": [16, 18, 31], "parallelcount": [16, 18, 31], "sharablelistarr": [16, 18, 31], "getcount": [16, 18, 31], "mapasyncresult": [16, 19, 31], "fetch": [16, 19, 31], "mapreduc": [16, 19, 31], "map_async": [16, 19, 31], "item": [16, 17, 19, 20, 21, 32], "key_arrai": [16, 20, 32], "value_arrai": [16, 20, 32], "get": [16, 21, 22, 23, 32], "getitem": [16, 21, 32], "peekitem": [16, 21, 32], "popitem": [16, 21, 32], "setitem": [16, 21, 23, 32], "flexiblearrai": [16, 22, 23, 32], "add_field": [16, 22, 23, 32], "cut": [16, 22, 23, 32], "expand": [16, 22, 23, 32], "get_arrai": [16, 22, 23, 32], "get_array_indic": [16, 22, 23, 32], "is_contigu": [16, 22, 23, 32], "make_contigu": [16, 22, 23, 32], "quick_add": [16, 22, 32], "quick_add_tupl": [16, 22, 32], "remove_field": [16, 22, 23, 32], "flexiblearraydict": [16, 22, 23, 32], "getcolumnview": [16, 22, 23, 32], "get_item_count": [16, 22, 32], "flexiblearraydictcolumnview": [16, 22, 23, 32], "flexiblearrayiter": [16, 22, 23, 32], "add_alia": [16, 22, 23, 32], "add_nam": [16, 22, 23, 32], "as_dtyp": [16, 22, 32], "binary_ceil": [16, 22, 32], "binary_floor": [16, 22, 32], "convert_r_0_1": [16, 22, 32], "convert_r_0_1_revers": [16, 22, 32], "convert_r_po": [16, 22, 32], "convert_r_pos_revers": [16, 22, 32], "csr_list_to_csr_matrix": [16, 22, 32], "highdimaccesserror": [16, 22, 32], "fields_view": [16, 22, 23, 32], "get_chunk": [16, 22, 23, 32], "get_precision_binary_digit": [16, 22, 32], "in1d": [16, 22, 32], "in1d2d": [16, 22, 32], "list_to_csr_matrix": [16, 22, 32], "merge_arrai": [16, 22, 32], "sparsepow": [16, 22, 32], "sparsepowersum": [16, 22, 32], "sparsepowersum2d": [16, 22, 32], "sparseprod": [16, 22, 32], "sparsesum": [16, 22, 32], "sparsesum_chosen": [16, 22, 32], "sparsesum_chosen_row": [16, 22, 32], "sparsesum_chosen_rows_fact": [16, 22, 32], "sparsesum_row_prod": [16, 22, 32], "add_by_keyword": [16, 23, 32], "add_tupl": [16, 23, 32], "changeindex": [16, 23, 32], "isrecarrai": [16, 23, 32], "isstructur": [16, 23, 32], "setitem_by_keyword": [16, 23, 32], "setitem_flex": [16, 23, 32], "indexdict": [16, 23, 32], "find_next_nonzero2d": [16, 23, 32], "get_common_element2d": [16, 23, 32], "pointer_prod": [16, 23, 32], "pointer_sum": [16, 23, 32], "pointer_sum3d": [16, 23, 32], "pointer_sum3dx": [16, 23, 32], "pointer_sum3di": [16, 23, 32], "pointer_sum_chosen": [16, 23, 32], "pointer_sum_chosen_row": [16, 23, 32], "pointer_sum_chosen_rows_fact": [16, 23, 32], "pointer_sum_row_prod": [16, 23, 32], "unique_tol": [16, 23, 32], "imultipli": [16, 24, 32], "multipli": [16, 24, 32], "toarrai": [16, 24, 32], "test1": [16, 24, 32], "test2": [16, 24, 32], "test3": [16, 24, 32], "decrease_print_level": [16, 26, 33], "get_parent_print": [16, 26, 33], "get_print_level": [16, 26, 33], "get_silent_statu": [16, 26, 33], "increase_print_level": [16, 26, 33], "inherit_print_level": [16, 26, 33], "inherit_silent_statu": [16, 26, 33], "print_statu": [16, 26, 33], "prst": [16, 26, 33], "set_parent_print": [16, 26, 33], "set_print_level": [16, 26, 33], "set_silent_statu": [16, 26, 33], "dictiter": [16, 27, 33], "emptylist": [16, 27, 33], "usag": [16, 29, 33], "blocksiz": [16, 28, 33], "default_extens": [16, 28, 33], "default_folder_extens": [16, 28, 33], "del_save_separ": [16, 28, 33], "hasattr": [16, 28, 33], "load_al": [16, 28, 33], "save_object": [16, 28, 33], "set_save_separ": [16, 28, 33], "load_object": [16, 28, 33], "writer": [16, 30, 33], "flush": [16, 30, 33], "super": [16, 28, 33], "docmetasuperclass": [16, 25, 33], "add_parent_doc": [16, 25, 33], "adjust_ind": [16, 25, 33], "get_ind": [16, 25, 33], "get_indent_multi": [16, 25, 33], "inherit_doc": [16, 25, 33], "should_append": [16, 25, 33], "should_ignor": [16, 25, 33], "should_insert": [16, 25, 33], "split_variables_numpi": [16, 25, 33], "staticmethod_inherit_doc": [16, 25, 33], "strip_lin": [16, 25, 33], "strip_priv": [16, 25, 33], "01": 17, "max_work": 17, "const_arg": 17, "shared_np_arr": 17, "fn": 17, "chunksiz": 17, "tasklength": 17, "chunknumb": 17, "min_chunks": 17, "equival": 17, "wait": 17, "limit": 17, "chop": 17, "chunk": 17, "submit": 17, "sent": 17, "adjust": 17, "approprietli": 17, "expliciet": 17, "func": [17, 19, 29], "out": [17, 30], "timeouterror": 17, "except": [17, 19], "task_length": 17, "chunk_numb": 17, "min_chunk_s": 17, "27": 18, "04": [18, 26], "parent": [18, 25], "context": 18, "dirti": 18, "occur": 18, "statement": 18, "someth": [18, 25], "accass": 18, "num_work": 18, "make_sharable_funct": 18, "exclud": 18, "prohibit_shar": 18, "simplifi": 18, "arglist": 18, "invalid": 18, "12": 19, "fetcher": 19, "backend": 19, "sharedmem": 19, "processbackend": 19, "sequenc": 19, "star": 19, "minlength": 19, "multil": 19, "As": 19, "suppos": 19, "debug": 19, "wrap": 19, "slaveexcept": 19, "array_lik": 19, "reduct": 19, "treat": 19, "len": 19, "fall": 19, "sequenti": 19, "overhead": 19, "worker": 19, "littl": 19, "slave": 19, "encount": 19, "underli": 19, "26": [20, 21, 27], "nparrai": 22, "recarrai": 22, "extentionfactor": 22, "pseudoshar": 22, "keyworddata": 22, "newlin": 22, "newrow": 22, "equalcondit": 22, "fancyindic": 22, "flexiblearrayarg": 22, "alia": [22, 23], "unstructur": [22, 23], "digit": 22, "listmatrix": 22, "notimplementederror": 22, "subarrai": 22, "dimens": 22, "returnkei": 22, "rtol": 22, "b": 22, "atol": 22, "view": [22, 23], "arr1": 22, "columns1": 22, "rows1": 22, "rowscolumn": 22, "arr2": 22, "rows2": 22, "sparsematric": 24, "dimension": 24, "spars": 24, "matric": 24, "decor": 25, "superclass": 25, "similar": [25, 28], "shinx": 25, "meta": 25, "singl": 25, "taken": 25, "child": 25, "renew": 25, "undocu": 25, "insert": 25, "marker": 25, "begin": [25, 28], "footer": 25, "put": 25, "children": 25, "metaclass": 25, "screen": 25, "suitabl": 25, "bundl": 25, "baseclass": 25, "mymethod": [25, 29], "myargument": 25, "doe": 25, "text": [25, 26], "seen": 25, "mymethod2": 25, "otherargu": 25, "myclass1": [25, 28], "overwirt": 25, "turn": 25, "myclass2": [25, 28], "method1": 25, "arg1": 25, "method2": 25, "arg2": 25, "method3": 25, "arg3": 25, "bundle_method": 25, "classnam": 25, "cls_dict": 25, "opportun": 25, "fromfunc": 25, "docstr": 25, "wherev": 25, "child_str": 25, "parent_str": 25, "indent_diff": 25, "joinstr": 25, "strippriv": 25, "parentprint": 26, "inheritfrompar": 26, "silent": 26, "percent": 26, "noindent": 26, "printlevel": 26, "stopvalu": 27, "instanc": 28, "again": 28, "until": 28, "myobject": 28, "__init__": 28, "attribute1": 28, "alwai": 28, "attribute2": 28, "myobject1": 28, "myobject2": 28, "ext": 28, "arx": 28, "unload": 28, "loadedobject": 28, "1048576": 28, "block": 28, "folderextens": 28, "overwritechildextens": 28, "rewrit": 28, "overwitten": 28, "few": 28, "small": 28, "2014": 29, "glob": 29, "file_nam": 30, "stdout": 30, "sterr": 30}, "objects": {"ci_rvm": [[1, 0, 0, "-", "ci_rvm"], [2, 0, 0, "-", "test_ci_rvm"]], "ci_rvm.ci_rvm": [[1, 1, 1, "", "CounterFun"], [1, 1, 1, "", "FlexibleSubproblem"], [1, 1, 1, "", "Flipper"], [1, 3, 1, "", "find_CI"], [1, 3, 1, "", "find_CI_bound"], [1, 3, 1, "", "find_function_CI"], [1, 3, 1, "", "get_independent_row_indices"], [1, 3, 1, "", "is_negative_definite"]], "ci_rvm.ci_rvm.FlexibleSubproblem": [[1, 2, 1, "", "solve"]], "ci_rvm.test_ci_rvm": [[2, 1, 1, "", "BaseTester"], [2, 1, 1, "", "DynamicalSystemTester"], [2, 1, 1, "", "H14Tester"], [2, 1, 1, "", "LogRegressTester"], [2, 1, 1, "", "TrackFun"], [2, 3, 1, "", "benchmark"], [2, 3, 1, "", "benchmark_"], [2, 3, 1, "", "binsearch"], [2, 3, 1, "", "bisection"], [2, 3, 1, "", "constrained_max"], [2, 3, 1, "", "convertPos"], [2, 3, 1, "", "convertPosInv"], [2, 3, 1, "", "convertPosInv_"], [2, 3, 1, "", "convertPos_"], [2, 3, 1, "", "create_plot"], [2, 3, 1, "", "find_CI"], [2, 3, 1, "", "find_CIs"], [2, 3, 1, "", "fixedFun"], [2, 3, 1, "", "gridsearch"], [2, 3, 1, "", "mixed_min"], [2, 3, 1, "", "root"], [2, 3, 1, "", "test_H14"], [2, 3, 1, "", "test_LogRegress"], [2, 3, 1, "", "test_LogRegress_pred"], [2, 3, 1, "", "test_dynamical_system"], [2, 3, 1, "", "test_find_CI"], [2, 3, 1, "", "venzon_moolgavkar"], [2, 3, 1, "", "wald"]], "ci_rvm.test_ci_rvm.BaseTester": [[2, 4, 1, "", "MLE"], [2, 2, 1, "", "convertPos"], [2, 2, 1, "", "convertPosInv"], [2, 4, 1, "", "funs"], [2, 2, 1, "", "get_funs"]], "ci_rvm.test_ci_rvm.DynamicalSystemTester": [[2, 2, 1, "", "f_constr"], [2, 2, 1, "", "f_prime"], [2, 2, 1, "", "get_funs"], [2, 2, 1, "", "get_funs_constr"], [2, 2, 1, "", "get_rss"], [2, 2, 1, "", "rss_dyn"], [2, 2, 1, "", "simulate"]], "ci_rvm.test_ci_rvm.H14Tester": [[2, 2, 1, "", "get_funs"]], "ci_rvm.test_ci_rvm.LogRegressTester": [[2, 2, 1, "", "get_funs"], [2, 2, 1, "", "simulate"], [2, 2, 1, "", "simulate_"]], "hybrid_vector_model": [[4, 0, 0, "-", "boater_movement_model"], [5, 0, 0, "-", "hybrid_vector_model"], [6, 0, 0, "-", "route_choice_model"], [7, 0, 0, "-", "statsutils"], [8, 0, 0, "-", "traveltime_model"]], "hybrid_vector_model.boater_movement_model": [[4, 1, 1, "", "TrafficFactorModel"], [4, 3, 1, "", "example"]], "hybrid_vector_model.boater_movement_model.TrafficFactorModel": [[4, 5, 1, "", "BOUNDS"], [4, 5, 1, "", "DESTINATION_COVARIATES"], [4, 5, 1, "", "LABELS"], [4, 5, 1, "", "ORIGIN_COVARIATES"], [4, 5, 1, "", "PERMUTATIONS"], [4, 5, 1, "", "SIZE"], [4, 2, 1, "", "convert_parameters"], [4, 2, 1, "", "get_mean_factor"], [4, 2, 1, "", "get_mean_factor_autograd"], [4, 2, 1, "", "process_sink_covariates"]], "hybrid_vector_model.hybrid_vector_model": [[5, 1, 1, "", "BaseTrafficFactorModel"], [5, 6, 1, "", "CPU_COUNT"], [5, 1, 1, "", "HybridVectorModel"], [5, 6, 1, "", "IDTYPE"], [5, 1, 1, "", "TransportNetwork"], [5, 3, 1, "", "create_distribution_plot"], [5, 3, 1, "", "create_observed_predicted_mean_error_plot"], [5, 3, 1, "", "create_observed_predicted_mean_error_plot_from_files"], [5, 3, 1, "", "mean_relative_absolute_error"], [5, 3, 1, "", "nbinom_fit"], [5, 3, 1, "", "redraw_predicted_observed"], [5, 3, 1, "", "safe_delattr"]], "hybrid_vector_model.hybrid_vector_model.BaseTrafficFactorModel": [[5, 5, 1, "", "BOUNDS"], [5, 5, 1, "", "DESTINATION_COVARIATES"], [5, 5, 1, "", "LABELS"], [5, 5, 1, "", "ORIGIN_COVARIATES"], [5, 5, 1, "", "PERMUTATIONS"], [5, 5, 1, "", "SIZE"], [5, 2, 1, "", "convert_parameters"], [5, 2, 1, "", "get_mean_factor"], [5, 2, 1, "", "get_mean_factor_autograd"], [5, 2, 1, "", "process_sink_covariates"], [5, 2, 1, "", "process_source_covariates"]], "hybrid_vector_model.hybrid_vector_model.HybridVectorModel": [[5, 2, 1, "", "check_count_distributions_NB"], [5, 2, 1, "", "compare_distributions"], [5, 2, 1, "", "compare_travel_time_distributions"], [5, 2, 1, "", "create_budget_plots"], [5, 2, 1, "", "create_caracteristic_plot"], [5, 2, 1, "", "create_quality_plots"], [5, 2, 1, "", "create_road_network"], [5, 2, 1, "", "create_route_choice_model"], [5, 2, 1, "", "create_travel_time_model"], [5, 2, 1, "", "find_potential_routes"], [5, 2, 1, "", "find_shortest_distances"], [5, 2, 1, "", "fit_flow_model"], [5, 2, 1, "", "fit_route_choice_model"], [5, 2, 1, "", "get_PMF_observation_prediction"], [5, 2, 1, "", "get_normalized_observation_prediction"], [5, 2, 1, "", "get_pair_distribution_property"], [5, 2, 1, "", "get_pair_observation_prediction"], [5, 2, 1, "", "get_station_mean_variance"], [5, 2, 1, "", "get_station_observation_prediction"], [5, 2, 1, "", "investigate_profile_likelihood"], [5, 2, 1, "", "maximize_log_likelihood"], [5, 2, 1, "", "maximize_log_likelihood_static"], [5, 2, 1, "", "new"], [5, 2, 1, "", "optimize_inspection_station_operation"], [5, 2, 1, "", "prepare_traffic_factor_model"], [5, 2, 1, "", "preprocess_survey_data"], [5, 2, 1, "", "read_destination_data"], [5, 2, 1, "", "read_origin_data"], [5, 2, 1, "", "read_postal_code_area_data"], [5, 2, 1, "", "read_survey_data"], [5, 2, 1, "", "save"], [5, 2, 1, "", "save_model_predictions"], [5, 2, 1, "", "save_simulated_observations"], [5, 2, 1, "", "set_compliance_rate"], [5, 2, 1, "", "set_infested"], [5, 2, 1, "", "set_origins_considered"], [5, 2, 1, "", "set_traffic_factor_model_class"], [5, 2, 1, "", "simulate_count_data"], [5, 2, 1, "", "test_1_1_regression"]], "hybrid_vector_model.hybrid_vector_model.TransportNetwork": [[5, 2, 1, "", "find_potential_routes"], [5, 2, 1, "", "find_shortest_distances"], [5, 2, 1, "", "preprocessing"], [5, 2, 1, "", "update_sources_considered"]], "hybrid_vector_model.route_choice_model": [[6, 1, 1, "", "RouteChoiceModel"]], "hybrid_vector_model.route_choice_model.RouteChoiceModel": [[6, 5, 1, "", "NOISEBOUND"], [6, 5, 1, "", "VARIABLE_LABELS"], [6, 2, 1, "", "fit"], [6, 4, 1, "", "fitted"], [6, 2, 1, "", "get_confidence_intervals"], [6, 2, 1, "", "get_nLL_funtions"], [6, 4, 1, "", "prepared"], [6, 2, 1, "", "set_fitting_data"]], "hybrid_vector_model.statsutils": [[7, 3, 1, "", "R2"], [7, 3, 1, "", "anderson_darling_NB"], [7, 3, 1, "", "anderson_darling_P"], [7, 3, 1, "", "anderson_darling_test_discrete"], [7, 3, 1, "", "vonmises_logpdf"], [7, 3, 1, "", "zero_truncated_NB"]], "hybrid_vector_model.traveltime_model": [[8, 1, 1, "", "BaseTrafficDensityDayTime"], [8, 1, 1, "", "TrafficDensityDayTime_PLinear"], [8, 1, 1, "", "TrafficDensityDayTime_StepFun"], [8, 1, 1, "", "TrafficDensityVonMises"], [8, 3, 1, "", "cropData"], [8, 3, 1, "", "fitEstimator"], [8, 3, 1, "", "readTimeData"]], "hybrid_vector_model.traveltime_model.BaseTrafficDensityDayTime": [[8, 2, 1, "", "interval_probability"], [8, 2, 1, "", "maximize_likelihood"], [8, 2, 1, "", "neg_log_likelihood"], [8, 2, 1, "", "pdf"], [8, 2, 1, "", "plot"]], "hybrid_vector_model.traveltime_model.TrafficDensityDayTime_PLinear": [[8, 2, 1, "", "interval_probability"], [8, 2, 1, "", "maximize_likelihood"], [8, 2, 1, "", "pdf"], [8, 2, 1, "", "plot"]], "hybrid_vector_model.traveltime_model.TrafficDensityDayTime_StepFun": [[8, 2, 1, "", "interval_probability"], [8, 2, 1, "", "maximize_likelihood"], [8, 2, 1, "", "pdf"], [8, 2, 1, "", "plot"]], "hybrid_vector_model.traveltime_model.TrafficDensityVonMises": [[8, 2, 1, "", "interval_probability"], [8, 2, 1, "", "maximize_likelihood"], [8, 2, 1, "", "neg_log_likelihood"], [8, 2, 1, "", "pdf"], [8, 2, 1, "", "plot"], [8, 2, 1, "", "sample"]], "lopaths": [[11, 0, 0, "-", "graph"], [12, 0, 0, "-", "graph_utils"], [13, 0, 0, "-", "sig_fig_rounding"], [14, 0, 0, "-", "test_graph"], [15, 0, 0, "-", "test_routes"]], "lopaths.graph": [[11, 6, 1, "", "CPU_COUNT"], [11, 1, 1, "", "FastGraph"], [11, 1, 1, "", "FlexibleGraph"], [11, 1, 1, "", "FlowPointGraph"]], "lopaths.graph.FastGraph": [[11, 2, 1, "", "add_edge"], [11, 2, 1, "", "add_edge_attributes"], [11, 2, 1, "", "add_vertex"], [11, 2, 1, "", "add_vertex_attributes"], [11, 2, 1, "", "make_edges_contiguous"], [11, 2, 1, "", "remove_edge"], [11, 2, 1, "", "remove_vertex"]], "lopaths.graph.FlexibleGraph": [[11, 2, 1, "", "add_edge"], [11, 2, 1, "", "add_edge_attributes"], [11, 2, 1, "", "add_vertex"], [11, 2, 1, "", "add_vertex_attributes"], [11, 2, 1, "", "get_edge_count"], [11, 2, 1, "", "get_edge_data"], [11, 2, 1, "", "get_neighbor_edges"], [11, 2, 1, "", "get_predecessors"], [11, 2, 1, "", "get_successors"], [11, 2, 1, "", "get_vertex_count"], [11, 2, 1, "", "get_vertex_data"], [11, 2, 1, "", "remove_edge"], [11, 2, 1, "", "remove_insignificant_dead_ends"], [11, 2, 1, "", "remove_vertex"], [11, 2, 1, "", "set_default_edge_data"], [11, 2, 1, "", "set_default_vertex_data"], [11, 2, 1, "", "set_edge_data"], [11, 2, 1, "", "set_vertex_data"]], "lopaths.graph.FlowPointGraph": [[11, 2, 1, "", "find_alternative_paths"], [11, 2, 1, "", "find_locally_optimal_paths"], [11, 2, 1, "", "find_shortest_distance_array"], [11, 2, 1, "", "find_shortest_path"], [11, 2, 1, "", "preprocessing"]], "lopaths.graph_utils": [[12, 3, 1, "", "find_shortest_distance"], [12, 3, 1, "", "find_shortest_path"], [12, 3, 1, "", "in_sets"]], "lopaths.sig_fig_rounding": [[13, 3, 1, "", "FormatValToSigFigs"], [13, 3, 1, "", "FormatValWithUncRounding"], [13, 3, 1, "", "RoundToSigFigs_decim"], [13, 3, 1, "", "RoundToSigFigs_fp"], [13, 3, 1, "", "SetDecimalPrecision"], [13, 3, 1, "", "ValueWithUncsRounding"]], "lopaths.test_graph": [[14, 1, 1, "", "GraphTester"], [14, 3, 1, "", "adjust_ticks"], [14, 3, 1, "", "arrstr"], [14, 3, 1, "", "create_min_paths_graph"], [14, 3, 1, "", "create_min_paths_graph2"], [14, 3, 1, "", "split_figure_vertical"], [14, 3, 1, "", "time_call"], [14, 3, 1, "", "timing"]], "lopaths.test_graph.GraphTester": [[14, 2, 1, "", "get_origin_destination_indices"], [14, 2, 1, "", "new"], [14, 2, 1, "", "preprocessing"], [14, 2, 1, "", "save"], [14, 2, 1, "", "test_REVC_LOC"], [14, 2, 1, "", "test_REVC_approximations"], [14, 2, 1, "", "test_REVC_once"], [14, 2, 1, "", "test_REVC_range"], [14, 2, 1, "", "test_REVC_range_avg"], [14, 2, 1, "", "test_REVC_repetition"], [14, 2, 1, "", "test_REVC_source_sink"], [14, 2, 1, "", "test_REVC_stretch"], [14, 2, 1, "", "test_optimizations"]], "lopaths.test_routes": [[15, 1, 1, "", "RouteTester"]], "lopaths.test_routes.RouteTester": [[15, 2, 1, "", "new"], [15, 2, 1, "", "save"], [15, 2, 1, "", "test_empirical_validity"]], "vemomoto_core.concurrent": [[17, 0, 0, "-", "concurrent_futures_ext"], [18, 0, 0, "-", "nicepar"], [19, 0, 0, "-", "sharedmem_ext"]], "vemomoto_core.concurrent.concurrent_futures_ext": [[17, 1, 1, "", "ProcessPoolExecutor"], [17, 3, 1, "", "get_cpu_chunk_counts"]], "vemomoto_core.concurrent.concurrent_futures_ext.ProcessPoolExecutor": [[17, 2, 1, "", "get_shared_arrays"], [17, 2, 1, "", "map"]], "vemomoto_core.concurrent.nicepar": [[18, 1, 1, "", "CircularParallelCounter"], [18, 1, 1, "", "Counter"], [18, 1, 1, "", "DummyObj"], [18, 1, 1, "", "DummyVar"], [18, 1, 1, "", "Lockable"], [18, 1, 1, "", "Locked"], [18, 1, 1, "", "ParallelClass"], [18, 1, 1, "", "ParallelCounter"], [18, 1, 1, "", "SharableListArr"], [18, 3, 1, "", "getCounter"]], "vemomoto_core.concurrent.nicepar.CircularParallelCounter": [[18, 2, 1, "", "next"], [18, 2, 1, "", "reset"]], "vemomoto_core.concurrent.nicepar.Counter": [[18, 2, 1, "", "next"], [18, 2, 1, "", "reset"]], "vemomoto_core.concurrent.nicepar.DummyObj": [[18, 2, 1, "", "update"]], "vemomoto_core.concurrent.nicepar.ParallelClass": [[18, 2, 1, "", "parmap"], [18, 2, 1, "", "postpone_task"]], "vemomoto_core.concurrent.nicepar.ParallelCounter": [[18, 2, 1, "", "next"], [18, 2, 1, "", "reset"]], "vemomoto_core.concurrent.sharedmem_ext": [[19, 1, 1, "", "MapAsyncResult"], [19, 1, 1, "", "MapReduce"]], "vemomoto_core.concurrent.sharedmem_ext.MapAsyncResult": [[19, 2, 1, "", "fetch"]], "vemomoto_core.concurrent.sharedmem_ext.MapReduce": [[19, 2, 1, "", "map_async"]], "vemomoto_core.npcollections": [[20, 0, 0, "-", "FixedOrderedIntDict"], [21, 0, 0, "-", "intquickheapdict"], [22, 0, 0, "-", "npext"], [23, 0, 0, "-", "npextc"], [24, 0, 0, "-", "sparse3d"]], "vemomoto_core.npcollections.FixedOrderedIntDict": [[20, 1, 1, "", "FixedOrderedIntDict"]], "vemomoto_core.npcollections.FixedOrderedIntDict.FixedOrderedIntDict": [[20, 2, 1, "", "items"], [20, 5, 1, "", "key_array"], [20, 2, 1, "", "keys"], [20, 2, 1, "", "new"], [20, 5, 1, "", "value_array"], [20, 2, 1, "", "values"]], "vemomoto_core.npcollections.intquickheapdict": [[21, 1, 1, "", "intquickheapdict"]], "vemomoto_core.npcollections.intquickheapdict.intquickheapdict": [[21, 2, 1, "", "get"], [21, 2, 1, "", "getitem"], [21, 2, 1, "", "items"], [21, 2, 1, "", "peekitem"], [21, 2, 1, "", "popitem"], [21, 2, 1, "", "setitem"]], "vemomoto_core.npcollections.npext": [[22, 1, 1, "", "FlexibleArray"], [22, 1, 1, "", "FlexibleArrayDict"], [22, 1, 1, "", "FlexibleArrayDictColumnView"], [22, 1, 1, "", "FlexibleArrayIterator"], [22, 3, 1, "", "add_alias"], [22, 3, 1, "", "add_fields"], [22, 3, 1, "", "add_names"], [22, 3, 1, "", "as_dtype"], [22, 3, 1, "", "binary_ceil"], [22, 3, 1, "", "binary_floor"], [22, 3, 1, "", "convert_R_0_1"], [22, 3, 1, "", "convert_R_0_1_reverse"], [22, 3, 1, "", "convert_R_pos"], [22, 3, 1, "", "convert_R_pos_reverse"], [22, 3, 1, "", "csr_list_to_csr_matrix"], [22, 1, 1, "", "csr_matrix_nd"], [22, 3, 1, "", "fields_view"], [22, 3, 1, "", "get_chunks"], [22, 3, 1, "", "get_precision_binary_digits"], [22, 3, 1, "", "in1d"], [22, 3, 1, "", "in1d2d"], [22, 3, 1, "", "list_to_csr_matrix"], [22, 3, 1, "", "merge_arrays"], [22, 3, 1, "", "remove_fields"], [22, 3, 1, "", "sparsepower"], [22, 3, 1, "", "sparsepowersum"], [22, 3, 1, "", "sparsepowersum2D"], [22, 3, 1, "", "sparseprod"], [22, 3, 1, "", "sparsesum"], [22, 3, 1, "", "sparsesum_chosen"], [22, 3, 1, "", "sparsesum_chosen_rows"], [22, 3, 1, "", "sparsesum_chosen_rows_fact"], [22, 3, 1, "", "sparsesum_row_prod"]], "vemomoto_core.npcollections.npext.FlexibleArray": [[22, 2, 1, "", "add"], [22, 2, 1, "", "add_fields"], [22, 2, 1, "", "cut"], [22, 2, 1, "", "exists"], [22, 2, 1, "", "expand"], [22, 2, 1, "", "extend"], [22, 2, 1, "", "get_array"], [22, 2, 1, "", "get_array_indices"], [22, 2, 1, "", "is_contiguous"], [22, 2, 1, "", "make_contiguous"], [22, 2, 1, "", "quick_add"], [22, 2, 1, "", "quick_add_tuple"], [22, 2, 1, "", "remove_fields"]], "vemomoto_core.npcollections.npext.FlexibleArrayDict": [[22, 2, 1, "", "add"], [22, 2, 1, "", "exists"], [22, 2, 1, "", "extend"], [22, 2, 1, "", "get"], [22, 2, 1, "", "getColumnView"], [22, 2, 1, "", "get_item_count"], [22, 2, 1, "", "quick_add"], [22, 2, 1, "", "quick_add_tuple"]], "vemomoto_core.npcollections.npext.FlexibleArrayDictColumnView": [[22, 2, 1, "", "add"], [22, 2, 1, "", "add_fields"], [22, 2, 1, "", "expand"], [22, 2, 1, "", "extend"], [22, 2, 1, "", "new"], [22, 2, 1, "", "quick_add"], [22, 2, 1, "", "remove_fields"]], "vemomoto_core.npcollections.npext.csr_matrix_nd": [[22, 5, 1, "", "HighDimAccessError"]], "vemomoto_core.npcollections.npextc": [[23, 1, 1, "", "FlexibleArray"], [23, 1, 1, "", "FlexibleArrayDict"], [23, 1, 1, "", "FlexibleArrayDictColumnView"], [23, 1, 1, "", "FlexibleArrayIterator"], [23, 3, 1, "", "add_alias"], [23, 3, 1, "", "add_names"], [23, 3, 1, "", "fields_view"], [23, 3, 1, "", "find_next_nonzero2d"], [23, 3, 1, "", "get_chunks"], [23, 3, 1, "", "get_common_element2d"], [23, 3, 1, "", "pointer_prod"], [23, 3, 1, "", "pointer_sum"], [23, 3, 1, "", "pointer_sum3D"], [23, 3, 1, "", "pointer_sum3DX"], [23, 3, 1, "", "pointer_sum3DY"], [23, 3, 1, "", "pointer_sum_chosen"], [23, 3, 1, "", "pointer_sum_chosen_rows"], [23, 3, 1, "", "pointer_sum_chosen_rows_fact"], [23, 3, 1, "", "pointer_sum_row_prod"], [23, 3, 1, "", "remove_fields"], [23, 3, 1, "", "unique_tol"]], "vemomoto_core.npcollections.npextc.FlexibleArray": [[23, 2, 1, "", "add"], [23, 2, 1, "", "add_by_keywords"], [23, 2, 1, "", "add_fields"], [23, 2, 1, "", "add_tuple"], [23, 5, 1, "", "array"], [23, 5, 1, "", "changeIndex"], [23, 5, 1, "", "considered"], [23, 2, 1, "", "cut"], [23, 2, 1, "", "exists"], [23, 2, 1, "", "expand"], [23, 2, 1, "", "extend"], [23, 2, 1, "", "get_array"], [23, 2, 1, "", "get_array_indices"], [23, 5, 1, "", "isRecArray"], [23, 5, 1, "", "isStructured"], [23, 2, 1, "", "is_contiguous"], [23, 2, 1, "", "make_contiguous"], [23, 2, 1, "", "new"], [23, 2, 1, "", "remove_fields"], [23, 2, 1, "", "setitem"], [23, 2, 1, "", "setitem_by_keywords"], [23, 2, 1, "", "setitem_flexible"], [23, 5, 1, "", "shape"], [23, 5, 1, "", "size"], [23, 5, 1, "", "space"]], "vemomoto_core.npcollections.npextc.FlexibleArrayDict": [[23, 2, 1, "", "exists"], [23, 2, 1, "", "extend"], [23, 2, 1, "", "get"], [23, 2, 1, "", "getColumnView"], [23, 5, 1, "", "indexDict"], [23, 2, 1, "", "new"], [23, 2, 1, "", "setitem"], [23, 2, 1, "", "setitem_by_keywords"], [23, 2, 1, "", "setitem_flexible"]], "vemomoto_core.npcollections.npextc.FlexibleArrayDictColumnView": [[23, 2, 1, "", "new"]], "vemomoto_core.npcollections.sparse3d": [[24, 1, 1, "", "Sparse3D"], [24, 3, 1, "", "test1"], [24, 3, 1, "", "test2"], [24, 3, 1, "", "test3"]], "vemomoto_core.npcollections.sparse3d.Sparse3D": [[24, 2, 1, "", "imultiply"], [24, 2, 1, "", "multiply"], [24, 2, 1, "", "sum"], [24, 2, 1, "", "toarray"]], "vemomoto_core.tools": [[25, 0, 0, "-", "doc_utils"], [26, 0, 0, "-", "hrprint"], [27, 0, 0, "-", "iterext"], [28, 0, 0, "-", "saveobject"], [29, 0, 0, "-", "simprofile"], [30, 0, 0, "-", "tee"]], "vemomoto_core.tools.doc_utils": [[25, 1, 1, "", "DocMetaSuperclass"], [25, 3, 1, "", "add_parent_doc"], [25, 3, 1, "", "adjust_indent"], [25, 3, 1, "", "get_indent"], [25, 3, 1, "", "get_indent_multi"], [25, 3, 1, "", "inherit_doc"], [25, 3, 1, "", "merge"], [25, 3, 1, "", "should_append"], [25, 3, 1, "", "should_ignore"], [25, 3, 1, "", "should_insert"], [25, 3, 1, "", "split_variables_numpy"], [25, 3, 1, "", "staticmethod_inherit_doc"], [25, 3, 1, "", "strip_lines"], [25, 3, 1, "", "strip_private"]], "vemomoto_core.tools.hrprint": [[26, 1, 1, "", "HierarchichalPrinter"]], "vemomoto_core.tools.hrprint.HierarchichalPrinter": [[26, 2, 1, "", "decrease_print_level"], [26, 2, 1, "", "get_parent_printer"], [26, 2, 1, "", "get_print_level"], [26, 2, 1, "", "get_silent_status"], [26, 2, 1, "", "increase_print_level"], [26, 2, 1, "", "inherit_print_level"], [26, 2, 1, "", "inherit_silent_status"], [26, 2, 1, "", "print_status"], [26, 2, 1, "", "prst"], [26, 2, 1, "", "set_parent_printer"], [26, 2, 1, "", "set_print_level"], [26, 2, 1, "", "set_silent_status"]], "vemomoto_core.tools.iterext": [[27, 1, 1, "", "DictIterator"], [27, 1, 1, "", "EmptyList"], [27, 1, 1, "", "Repeater"]], "vemomoto_core.tools.saveobject": [[28, 6, 1, "", "BLOCKSIZE"], [28, 6, 1, "", "DEFAULT_EXTENSION"], [28, 6, 1, "", "DEFAULT_FOLDER_EXTENSION"], [28, 1, 1, "", "SeparatelySaveable"], [28, 3, 1, "", "load_object"], [28, 3, 1, "", "save_object"]], "vemomoto_core.tools.saveobject.SeparatelySaveable": [[28, 2, 1, "", "del_save_separately"], [28, 2, 1, "", "hasattr"], [28, 2, 1, "", "load_all"], [28, 2, 1, "", "save_object"], [28, 2, 1, "", "set_save_separately"]], "vemomoto_core.tools.simprofile": [[29, 3, 1, "", "profile"]], "vemomoto_core.tools.tee": [[30, 1, 1, "", "Tee"], [30, 1, 1, "", "Writer"]], "vemomoto_core.tools.tee.Writer": [[30, 2, 1, "", "flush"], [30, 2, 1, "", "write"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"]}, "titleterms": {"packag": [0, 3, 10, 16, 31, 32, 33], "ci_rvm": [0, 1, 2], "instal": [0, 3, 9, 10, 16], "usag": [0, 3, 25, 28], "scientif": [0, 3, 9, 10], "public": [0, 3, 9, 10], "modul": [1, 2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "test_ci_rvm": 2, "hybrid_vector_model": [3, 4, 5, 6, 7, 8], "boater_movement_model": 4, "route_choice_model": 6, "statsutil": 7, "traveltime_model": 8, "vemomoto": 9, "vector": 9, "movement": 9, "model": 9, "tool": [9, 25, 26, 27, 28, 29, 30, 33], "licens": 9, "referenc": 9, "bug": 9, "featur": 9, "request": 9, "contribut": 9, "api": 9, "tabl": 9, "content": 9, "indic": 9, "lopath": [10, 11, 12, 13, 14, 15], "graph": 11, "graph_util": 12, "sig_fig_round": 13, "test_graph": 14, "test_rout": 15, "namespac": 16, "vemomoto_cor": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "concurr": [17, 18, 19, 31], "concurrent_futures_ext": 17, "nicepar": 18, "sharedmem_ext": 19, "npcollect": [20, 21, 22, 23, 24, 32], "fixedorderedintdict": 20, "intquickheapdict": 21, "npext": 22, "npextc": 23, "sparse3d": 24, "doc_util": 25, "exampl": 25, "1": 25, "inherit": 25, "document": 25, "from": 25, "super": 25, "class": 25, "2": 25, "an": 25, "other": 25, "method": 25, "hrprint": 26, "iterext": 27, "saveobject": 28, "simprofil": 29, "tee": 30}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"Package: ci_rvm": [[0, "package-ci-rvm"]], "Installation": [[0, "installation"], [3, "installation"], [9, "installation"], [10, "installation"], [16, "installation"]], "Usage": [[0, "usage"], [3, "usage"], [25, "usage"], [28, "usage"]], "Scientific Publication": [[0, "scientific-publication"], [10, "scientific-publication"]], "Module: ci_rvm.ci_rvm": [[1, "module-ci_rvm.ci_rvm"]], "Module: ci_rvm.test_ci_rvm": [[2, "module-ci_rvm.test_ci_rvm"]], "Package: hybrid_vector_model": [[3, "package-hybrid-vector-model"]], "Scientific Publications": [[3, "scientific-publications"]], "Module: hybrid_vector_model.boater_movement_model": [[4, "module-hybrid_vector_model.boater_movement_model"]], "Module: hybrid_vector_model.hybrid_vector_model": [[5, "module-hybrid_vector_model.hybrid_vector_model"]], "Module: hybrid_vector_model.route_choice_model": [[6, "module-hybrid_vector_model.route_choice_model"]], "Module: hybrid_vector_model.statsutils": [[7, "module-hybrid_vector_model.statsutils"]], "Module: hybrid_vector_model.traveltime_model": [[8, "module-hybrid_vector_model.traveltime_model"]], "VeMoMoTo - Vector Movement Modelling Tools": [[9, "vemomoto-vector-movement-modelling-tools"]], "License and Referencing in Scientific Publications": [[9, "license-and-referencing-in-scientific-publications"]], "Bugs, Feature Requests, and Contributions": [[9, "bugs-feature-requests-and-contributions"]], "API - Table of Contents": [[9, "api-table-of-contents"]], "Indices and Tables": [[9, "indices-and-tables"]], "Package: lopaths": [[10, "package-lopaths"]], "Module: lopaths.graph": [[11, "module-lopaths.graph"]], "Module: lopaths.graph_utils": [[12, "module-lopaths.graph_utils"]], "Module: lopaths.sig_fig_rounding": [[13, "module-lopaths.sig_fig_rounding"]], "Module: lopaths.test_graph": [[14, "module-lopaths.test_graph"]], "Module: lopaths.test_routes": [[15, "module-lopaths.test_routes"]], "Namespace package: vemomoto_core": [[16, "namespace-package-vemomoto-core"]], "Module: vemomoto_core.concurrent.concurrent_futures_ext": [[17, "module-vemomoto_core.concurrent.concurrent_futures_ext"]], "Module: vemomoto_core.concurrent.nicepar": [[18, "module-vemomoto_core.concurrent.nicepar"]], "Module: vemomoto_core.concurrent.sharedmem_ext": [[19, "module-vemomoto_core.concurrent.sharedmem_ext"]], "Module: vemomoto_core.npcollections.FixedOrderedIntDict": [[20, "module-vemomoto_core.npcollections.FixedOrderedIntDict"]], "Module: vemomoto_core.npcollections.intquickheapdict": [[21, "module-vemomoto_core.npcollections.intquickheapdict"]], "Module: vemomoto_core.npcollections.npext": [[22, "module-vemomoto_core.npcollections.npext"]], "Module: vemomoto_core.npcollections.npextc": [[23, "module-vemomoto_core.npcollections.npextc"]], "Module: vemomoto_core.npcollections.sparse3d": [[24, "module-vemomoto_core.npcollections.sparse3d"]], "Module: vemomoto_core.tools.doc_utils": [[25, "module-vemomoto_core.tools.doc_utils"]], "Example 1: Inheriting documentation from the super class": [[25, "example-1-inheriting-documentation-from-the-super-class"]], "Example 2: Inheriting documentation from an other method": [[25, "example-2-inheriting-documentation-from-an-other-method"]], "Module: vemomoto_core.tools.hrprint": [[26, "module-vemomoto_core.tools.hrprint"]], "Module: vemomoto_core.tools.iterext": [[27, "module-vemomoto_core.tools.iterext"]], "Module: vemomoto_core.tools.saveobject": [[28, "module-vemomoto_core.tools.saveobject"]], "Module: vemomoto_core.tools.simprofile": [[29, "module-vemomoto_core.tools.simprofile"]], "Module: vemomoto_core.tools.tee": [[30, "module-vemomoto_core.tools.tee"]], "Package: vemomoto_core.concurrent": [[31, "package-vemomoto-core-concurrent"]], "Package: npcollections": [[32, "package-npcollections"]], "Package: vemomoto_core.vemomoto_core.tools": [[33, "package-vemomoto-core-vemomoto-core-tools"]]}, "indexentries": {"counterfun (class in ci_rvm.ci_rvm)": [[1, "ci_rvm.ci_rvm.CounterFun"]], "flexiblesubproblem (class in ci_rvm.ci_rvm)": [[1, "ci_rvm.ci_rvm.FlexibleSubproblem"]], "flipper (class in ci_rvm.ci_rvm)": [[1, "ci_rvm.ci_rvm.Flipper"]], "ci_rvm.ci_rvm": [[1, "module-ci_rvm.ci_rvm"]], "find_ci() (in module ci_rvm.ci_rvm)": [[1, "ci_rvm.ci_rvm.find_CI"]], "find_ci_bound() (in module ci_rvm.ci_rvm)": [[1, "ci_rvm.ci_rvm.find_CI_bound"]], "find_function_ci() (in module ci_rvm.ci_rvm)": [[1, "ci_rvm.ci_rvm.find_function_CI"]], "get_independent_row_indices() (in module ci_rvm.ci_rvm)": [[1, "ci_rvm.ci_rvm.get_independent_row_indices"]], "is_negative_definite() (in module ci_rvm.ci_rvm)": [[1, "ci_rvm.ci_rvm.is_negative_definite"]], "module": [[1, "module-ci_rvm.ci_rvm"], [2, "module-ci_rvm.test_ci_rvm"], [4, "module-hybrid_vector_model.boater_movement_model"], [5, "module-hybrid_vector_model.hybrid_vector_model"], [6, "module-hybrid_vector_model.route_choice_model"], [7, "module-hybrid_vector_model.statsutils"], [8, "module-hybrid_vector_model.traveltime_model"], [11, "module-lopaths.graph"], [12, "module-lopaths.graph_utils"], [13, "module-lopaths.sig_fig_rounding"], [14, "module-lopaths.test_graph"], [15, "module-lopaths.test_routes"], [17, "module-vemomoto_core.concurrent.concurrent_futures_ext"], [18, "module-vemomoto_core.concurrent.nicepar"], [19, "module-vemomoto_core.concurrent.sharedmem_ext"], [20, "module-vemomoto_core.npcollections.FixedOrderedIntDict"], [21, "module-vemomoto_core.npcollections.intquickheapdict"], [22, "module-vemomoto_core.npcollections.npext"], [23, "module-vemomoto_core.npcollections.npextc"], [24, "module-vemomoto_core.npcollections.sparse3d"], [25, "module-vemomoto_core.tools.doc_utils"], [26, "module-vemomoto_core.tools.hrprint"], [27, "module-vemomoto_core.tools.iterext"], [28, "module-vemomoto_core.tools.saveobject"], [29, "module-vemomoto_core.tools.simprofile"], [30, "module-vemomoto_core.tools.tee"]], "solve() (flexiblesubproblem method)": [[1, "ci_rvm.ci_rvm.FlexibleSubproblem.solve"]], "basetester (class in ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.BaseTester"]], "dynamicalsystemtester (class in ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.DynamicalSystemTester"]], "h14tester (class in ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.H14Tester"]], "logregresstester (class in ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.LogRegressTester"]], "mle (basetester property)": [[2, "ci_rvm.test_ci_rvm.BaseTester.MLE"]], "trackfun (class in ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.TrackFun"]], "benchmark() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.benchmark"]], "benchmark_() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.benchmark_"]], "binsearch() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.binsearch"]], "bisection() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.bisection"]], "ci_rvm.test_ci_rvm": [[2, "module-ci_rvm.test_ci_rvm"]], "constrained_max() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.constrained_max"]], "convertpos() (basetester method)": [[2, "ci_rvm.test_ci_rvm.BaseTester.convertPos"]], "convertpos() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.convertPos"]], "convertposinv() (basetester method)": [[2, "ci_rvm.test_ci_rvm.BaseTester.convertPosInv"]], "convertposinv() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.convertPosInv"]], "convertposinv_() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.convertPosInv_"]], "convertpos_() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.convertPos_"]], "create_plot() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.create_plot"]], "f_constr() (dynamicalsystemtester static method)": [[2, "ci_rvm.test_ci_rvm.DynamicalSystemTester.f_constr"]], "f_prime() (dynamicalsystemtester static method)": [[2, "ci_rvm.test_ci_rvm.DynamicalSystemTester.f_prime"]], "find_ci() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.find_CI"]], "find_cis() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.find_CIs"]], "fixedfun() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.fixedFun"]], "funs (basetester property)": [[2, "ci_rvm.test_ci_rvm.BaseTester.funs"]], "get_funs() (basetester method)": [[2, "ci_rvm.test_ci_rvm.BaseTester.get_funs"]], "get_funs() (dynamicalsystemtester method)": [[2, "ci_rvm.test_ci_rvm.DynamicalSystemTester.get_funs"]], "get_funs() (h14tester method)": [[2, "ci_rvm.test_ci_rvm.H14Tester.get_funs"]], "get_funs() (logregresstester method)": [[2, "ci_rvm.test_ci_rvm.LogRegressTester.get_funs"]], "get_funs_constr() (dynamicalsystemtester method)": [[2, "ci_rvm.test_ci_rvm.DynamicalSystemTester.get_funs_constr"]], "get_rss() (dynamicalsystemtester method)": [[2, "ci_rvm.test_ci_rvm.DynamicalSystemTester.get_rss"]], "gridsearch() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.gridsearch"]], "mixed_min() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.mixed_min"]], "root() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.root"]], "rss_dyn() (dynamicalsystemtester static method)": [[2, "ci_rvm.test_ci_rvm.DynamicalSystemTester.rss_dyn"]], "simulate() (dynamicalsystemtester method)": [[2, "ci_rvm.test_ci_rvm.DynamicalSystemTester.simulate"]], "simulate() (logregresstester method)": [[2, "ci_rvm.test_ci_rvm.LogRegressTester.simulate"]], "simulate_() (logregresstester method)": [[2, "ci_rvm.test_ci_rvm.LogRegressTester.simulate_"]], "test_h14() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.test_H14"]], "test_logregress() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.test_LogRegress"]], "test_logregress_pred() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.test_LogRegress_pred"]], "test_dynamical_system() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.test_dynamical_system"]], "test_find_ci() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.test_find_CI"]], "venzon_moolgavkar() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.venzon_moolgavkar"]], "wald() (in module ci_rvm.test_ci_rvm)": [[2, "ci_rvm.test_ci_rvm.wald"]], "bounds (trafficfactormodel attribute)": [[4, "hybrid_vector_model.boater_movement_model.TrafficFactorModel.BOUNDS"]], "destination_covariates (trafficfactormodel attribute)": [[4, "hybrid_vector_model.boater_movement_model.TrafficFactorModel.DESTINATION_COVARIATES"]], "labels (trafficfactormodel attribute)": [[4, "hybrid_vector_model.boater_movement_model.TrafficFactorModel.LABELS"]], "origin_covariates (trafficfactormodel attribute)": [[4, "hybrid_vector_model.boater_movement_model.TrafficFactorModel.ORIGIN_COVARIATES"]], "permutations (trafficfactormodel attribute)": [[4, "hybrid_vector_model.boater_movement_model.TrafficFactorModel.PERMUTATIONS"]], "size (trafficfactormodel attribute)": [[4, "hybrid_vector_model.boater_movement_model.TrafficFactorModel.SIZE"]], "trafficfactormodel (class in hybrid_vector_model.boater_movement_model)": [[4, "hybrid_vector_model.boater_movement_model.TrafficFactorModel"]], "convert_parameters() (trafficfactormodel method)": [[4, "hybrid_vector_model.boater_movement_model.TrafficFactorModel.convert_parameters"]], "example() (in module hybrid_vector_model.boater_movement_model)": [[4, "hybrid_vector_model.boater_movement_model.example"]], "get_mean_factor() (trafficfactormodel method)": [[4, "hybrid_vector_model.boater_movement_model.TrafficFactorModel.get_mean_factor"]], "get_mean_factor_autograd() (trafficfactormodel method)": [[4, "hybrid_vector_model.boater_movement_model.TrafficFactorModel.get_mean_factor_autograd"]], "hybrid_vector_model.boater_movement_model": [[4, "module-hybrid_vector_model.boater_movement_model"]], "process_sink_covariates() (trafficfactormodel static method)": [[4, "hybrid_vector_model.boater_movement_model.TrafficFactorModel.process_sink_covariates"]], "bounds (basetrafficfactormodel attribute)": [[5, "hybrid_vector_model.hybrid_vector_model.BaseTrafficFactorModel.BOUNDS"]], "basetrafficfactormodel (class in hybrid_vector_model.hybrid_vector_model)": [[5, "hybrid_vector_model.hybrid_vector_model.BaseTrafficFactorModel"]], "cpu_count (in module hybrid_vector_model.hybrid_vector_model)": [[5, "hybrid_vector_model.hybrid_vector_model.CPU_COUNT"]], "destination_covariates (basetrafficfactormodel attribute)": [[5, "hybrid_vector_model.hybrid_vector_model.BaseTrafficFactorModel.DESTINATION_COVARIATES"]], "hybridvectormodel (class in hybrid_vector_model.hybrid_vector_model)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel"]], "idtype (in module hybrid_vector_model.hybrid_vector_model)": [[5, "hybrid_vector_model.hybrid_vector_model.IDTYPE"]], "labels (basetrafficfactormodel attribute)": [[5, "hybrid_vector_model.hybrid_vector_model.BaseTrafficFactorModel.LABELS"]], "origin_covariates (basetrafficfactormodel attribute)": [[5, "hybrid_vector_model.hybrid_vector_model.BaseTrafficFactorModel.ORIGIN_COVARIATES"]], "permutations (basetrafficfactormodel attribute)": [[5, "hybrid_vector_model.hybrid_vector_model.BaseTrafficFactorModel.PERMUTATIONS"]], "size (basetrafficfactormodel attribute)": [[5, "hybrid_vector_model.hybrid_vector_model.BaseTrafficFactorModel.SIZE"]], "transportnetwork (class in hybrid_vector_model.hybrid_vector_model)": [[5, "hybrid_vector_model.hybrid_vector_model.TransportNetwork"]], "check_count_distributions_nb() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.check_count_distributions_NB"]], "compare_distributions() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.compare_distributions"]], "compare_travel_time_distributions() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.compare_travel_time_distributions"]], "convert_parameters() (basetrafficfactormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.BaseTrafficFactorModel.convert_parameters"]], "create_budget_plots() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.create_budget_plots"]], "create_caracteristic_plot() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.create_caracteristic_plot"]], "create_distribution_plot() (in module hybrid_vector_model.hybrid_vector_model)": [[5, "hybrid_vector_model.hybrid_vector_model.create_distribution_plot"]], "create_observed_predicted_mean_error_plot() (in module hybrid_vector_model.hybrid_vector_model)": [[5, "hybrid_vector_model.hybrid_vector_model.create_observed_predicted_mean_error_plot"]], "create_observed_predicted_mean_error_plot_from_files() (in module hybrid_vector_model.hybrid_vector_model)": [[5, "hybrid_vector_model.hybrid_vector_model.create_observed_predicted_mean_error_plot_from_files"]], "create_quality_plots() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.create_quality_plots"]], "create_road_network() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.create_road_network"]], "create_route_choice_model() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.create_route_choice_model"]], "create_travel_time_model() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.create_travel_time_model"]], "find_potential_routes() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.find_potential_routes"]], "find_potential_routes() (transportnetwork method)": [[5, "hybrid_vector_model.hybrid_vector_model.TransportNetwork.find_potential_routes"]], "find_shortest_distances() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.find_shortest_distances"]], "find_shortest_distances() (transportnetwork method)": [[5, "hybrid_vector_model.hybrid_vector_model.TransportNetwork.find_shortest_distances"]], "fit_flow_model() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.fit_flow_model"]], "fit_route_choice_model() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.fit_route_choice_model"]], "get_pmf_observation_prediction() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.get_PMF_observation_prediction"]], "get_mean_factor() (basetrafficfactormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.BaseTrafficFactorModel.get_mean_factor"]], "get_mean_factor_autograd() (basetrafficfactormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.BaseTrafficFactorModel.get_mean_factor_autograd"]], "get_normalized_observation_prediction() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.get_normalized_observation_prediction"]], "get_pair_distribution_property() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.get_pair_distribution_property"]], "get_pair_observation_prediction() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.get_pair_observation_prediction"]], "get_station_mean_variance() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.get_station_mean_variance"]], "get_station_observation_prediction() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.get_station_observation_prediction"]], "hybrid_vector_model.hybrid_vector_model": [[5, "module-hybrid_vector_model.hybrid_vector_model"]], "investigate_profile_likelihood() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.investigate_profile_likelihood"]], "maximize_log_likelihood() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.maximize_log_likelihood"]], "maximize_log_likelihood_static() (hybridvectormodel static method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.maximize_log_likelihood_static"]], "mean_relative_absolute_error() (in module hybrid_vector_model.hybrid_vector_model)": [[5, "hybrid_vector_model.hybrid_vector_model.mean_relative_absolute_error"]], "nbinom_fit() (in module hybrid_vector_model.hybrid_vector_model)": [[5, "hybrid_vector_model.hybrid_vector_model.nbinom_fit"]], "new() (hybridvectormodel static method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.new"]], "optimize_inspection_station_operation() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.optimize_inspection_station_operation"]], "prepare_traffic_factor_model() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.prepare_traffic_factor_model"]], "preprocess_survey_data() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.preprocess_survey_data"]], "preprocessing() (transportnetwork method)": [[5, "hybrid_vector_model.hybrid_vector_model.TransportNetwork.preprocessing"]], "process_sink_covariates() (basetrafficfactormodel static method)": [[5, "hybrid_vector_model.hybrid_vector_model.BaseTrafficFactorModel.process_sink_covariates"]], "process_source_covariates() (basetrafficfactormodel static method)": [[5, "hybrid_vector_model.hybrid_vector_model.BaseTrafficFactorModel.process_source_covariates"]], "read_destination_data() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.read_destination_data"]], "read_origin_data() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.read_origin_data"]], "read_postal_code_area_data() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.read_postal_code_area_data"]], "read_survey_data() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.read_survey_data"]], "redraw_predicted_observed() (in module hybrid_vector_model.hybrid_vector_model)": [[5, "hybrid_vector_model.hybrid_vector_model.redraw_predicted_observed"]], "safe_delattr() (in module hybrid_vector_model.hybrid_vector_model)": [[5, "hybrid_vector_model.hybrid_vector_model.safe_delattr"]], "save() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.save"]], "save_model_predictions() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.save_model_predictions"]], "save_simulated_observations() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.save_simulated_observations"]], "set_compliance_rate() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.set_compliance_rate"]], "set_infested() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.set_infested"]], "set_origins_considered() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.set_origins_considered"]], "set_traffic_factor_model_class() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.set_traffic_factor_model_class"]], "simulate_count_data() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.simulate_count_data"]], "test_1_1_regression() (hybridvectormodel method)": [[5, "hybrid_vector_model.hybrid_vector_model.HybridVectorModel.test_1_1_regression"]], "update_sources_considered() (transportnetwork method)": [[5, "hybrid_vector_model.hybrid_vector_model.TransportNetwork.update_sources_considered"]], "noisebound (routechoicemodel attribute)": [[6, "hybrid_vector_model.route_choice_model.RouteChoiceModel.NOISEBOUND"]], "routechoicemodel (class in hybrid_vector_model.route_choice_model)": [[6, "hybrid_vector_model.route_choice_model.RouteChoiceModel"]], "variable_labels (routechoicemodel attribute)": [[6, "hybrid_vector_model.route_choice_model.RouteChoiceModel.VARIABLE_LABELS"]], "fit() (routechoicemodel method)": [[6, "hybrid_vector_model.route_choice_model.RouteChoiceModel.fit"]], "fitted (routechoicemodel property)": [[6, "hybrid_vector_model.route_choice_model.RouteChoiceModel.fitted"]], "get_confidence_intervals() (routechoicemodel method)": [[6, "hybrid_vector_model.route_choice_model.RouteChoiceModel.get_confidence_intervals"]], "get_nll_funtions() (routechoicemodel method)": [[6, "hybrid_vector_model.route_choice_model.RouteChoiceModel.get_nLL_funtions"]], "hybrid_vector_model.route_choice_model": [[6, "module-hybrid_vector_model.route_choice_model"]], "prepared (routechoicemodel property)": [[6, "hybrid_vector_model.route_choice_model.RouteChoiceModel.prepared"]], "set_fitting_data() (routechoicemodel method)": [[6, "hybrid_vector_model.route_choice_model.RouteChoiceModel.set_fitting_data"]], "r2() (in module hybrid_vector_model.statsutils)": [[7, "hybrid_vector_model.statsutils.R2"]], "anderson_darling_nb() (in module hybrid_vector_model.statsutils)": [[7, "hybrid_vector_model.statsutils.anderson_darling_NB"]], "anderson_darling_p() (in module hybrid_vector_model.statsutils)": [[7, "hybrid_vector_model.statsutils.anderson_darling_P"]], "anderson_darling_test_discrete() (in module hybrid_vector_model.statsutils)": [[7, "hybrid_vector_model.statsutils.anderson_darling_test_discrete"]], "hybrid_vector_model.statsutils": [[7, "module-hybrid_vector_model.statsutils"]], "vonmises_logpdf() (in module hybrid_vector_model.statsutils)": [[7, "hybrid_vector_model.statsutils.vonmises_logpdf"]], "zero_truncated_nb() (in module hybrid_vector_model.statsutils)": [[7, "hybrid_vector_model.statsutils.zero_truncated_NB"]], "basetrafficdensitydaytime (class in hybrid_vector_model.traveltime_model)": [[8, "hybrid_vector_model.traveltime_model.BaseTrafficDensityDayTime"]], "trafficdensitydaytime_plinear (class in hybrid_vector_model.traveltime_model)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityDayTime_PLinear"]], "trafficdensitydaytime_stepfun (class in hybrid_vector_model.traveltime_model)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityDayTime_StepFun"]], "trafficdensityvonmises (class in hybrid_vector_model.traveltime_model)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityVonMises"]], "cropdata() (in module hybrid_vector_model.traveltime_model)": [[8, "hybrid_vector_model.traveltime_model.cropData"]], "fitestimator() (in module hybrid_vector_model.traveltime_model)": [[8, "hybrid_vector_model.traveltime_model.fitEstimator"]], "hybrid_vector_model.traveltime_model": [[8, "module-hybrid_vector_model.traveltime_model"]], "interval_probability() (basetrafficdensitydaytime method)": [[8, "hybrid_vector_model.traveltime_model.BaseTrafficDensityDayTime.interval_probability"]], "interval_probability() (trafficdensitydaytime_plinear method)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityDayTime_PLinear.interval_probability"]], "interval_probability() (trafficdensitydaytime_stepfun method)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityDayTime_StepFun.interval_probability"]], "interval_probability() (trafficdensityvonmises method)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityVonMises.interval_probability"]], "maximize_likelihood() (basetrafficdensitydaytime method)": [[8, "hybrid_vector_model.traveltime_model.BaseTrafficDensityDayTime.maximize_likelihood"]], "maximize_likelihood() (trafficdensitydaytime_plinear method)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityDayTime_PLinear.maximize_likelihood"]], "maximize_likelihood() (trafficdensitydaytime_stepfun method)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityDayTime_StepFun.maximize_likelihood"]], "maximize_likelihood() (trafficdensityvonmises method)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityVonMises.maximize_likelihood"]], "neg_log_likelihood() (basetrafficdensitydaytime method)": [[8, "hybrid_vector_model.traveltime_model.BaseTrafficDensityDayTime.neg_log_likelihood"]], "neg_log_likelihood() (trafficdensityvonmises method)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityVonMises.neg_log_likelihood"]], "pdf() (basetrafficdensitydaytime method)": [[8, "hybrid_vector_model.traveltime_model.BaseTrafficDensityDayTime.pdf"]], "pdf() (trafficdensitydaytime_plinear method)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityDayTime_PLinear.pdf"]], "pdf() (trafficdensitydaytime_stepfun method)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityDayTime_StepFun.pdf"]], "pdf() (trafficdensityvonmises method)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityVonMises.pdf"]], "plot() (basetrafficdensitydaytime method)": [[8, "hybrid_vector_model.traveltime_model.BaseTrafficDensityDayTime.plot"]], "plot() (trafficdensitydaytime_plinear method)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityDayTime_PLinear.plot"]], "plot() (trafficdensitydaytime_stepfun method)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityDayTime_StepFun.plot"]], "plot() (trafficdensityvonmises method)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityVonMises.plot"]], "readtimedata() (in module hybrid_vector_model.traveltime_model)": [[8, "hybrid_vector_model.traveltime_model.readTimeData"]], "sample() (trafficdensityvonmises method)": [[8, "hybrid_vector_model.traveltime_model.TrafficDensityVonMises.sample"]], "cpu_count (in module lopaths.graph)": [[11, "lopaths.graph.CPU_COUNT"]], "fastgraph (class in lopaths.graph)": [[11, "lopaths.graph.FastGraph"]], "flexiblegraph (class in lopaths.graph)": [[11, "lopaths.graph.FlexibleGraph"]], "flowpointgraph (class in lopaths.graph)": [[11, "lopaths.graph.FlowPointGraph"]], "add_edge() (fastgraph method)": [[11, "lopaths.graph.FastGraph.add_edge"]], "add_edge() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.add_edge"]], "add_edge_attributes() (fastgraph method)": [[11, "lopaths.graph.FastGraph.add_edge_attributes"]], "add_edge_attributes() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.add_edge_attributes"]], "add_vertex() (fastgraph method)": [[11, "lopaths.graph.FastGraph.add_vertex"]], "add_vertex() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.add_vertex"]], "add_vertex_attributes() (fastgraph method)": [[11, "lopaths.graph.FastGraph.add_vertex_attributes"]], "add_vertex_attributes() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.add_vertex_attributes"]], "find_alternative_paths() (flowpointgraph method)": [[11, "lopaths.graph.FlowPointGraph.find_alternative_paths"]], "find_locally_optimal_paths() (flowpointgraph method)": [[11, "lopaths.graph.FlowPointGraph.find_locally_optimal_paths"]], "find_shortest_distance_array() (flowpointgraph method)": [[11, "lopaths.graph.FlowPointGraph.find_shortest_distance_array"]], "find_shortest_path() (flowpointgraph method)": [[11, "lopaths.graph.FlowPointGraph.find_shortest_path"]], "get_edge_count() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.get_edge_count"]], "get_edge_data() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.get_edge_data"]], "get_neighbor_edges() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.get_neighbor_edges"]], "get_predecessors() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.get_predecessors"]], "get_successors() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.get_successors"]], "get_vertex_count() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.get_vertex_count"]], "get_vertex_data() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.get_vertex_data"]], "lopaths.graph": [[11, "module-lopaths.graph"]], "make_edges_contiguous() (fastgraph method)": [[11, "lopaths.graph.FastGraph.make_edges_contiguous"]], "preprocessing() (flowpointgraph method)": [[11, "lopaths.graph.FlowPointGraph.preprocessing"]], "remove_edge() (fastgraph method)": [[11, "lopaths.graph.FastGraph.remove_edge"]], "remove_edge() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.remove_edge"]], "remove_insignificant_dead_ends() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.remove_insignificant_dead_ends"]], "remove_vertex() (fastgraph method)": [[11, "lopaths.graph.FastGraph.remove_vertex"]], "remove_vertex() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.remove_vertex"]], "set_default_edge_data() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.set_default_edge_data"]], "set_default_vertex_data() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.set_default_vertex_data"]], "set_edge_data() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.set_edge_data"]], "set_vertex_data() (flexiblegraph method)": [[11, "lopaths.graph.FlexibleGraph.set_vertex_data"]], "find_shortest_distance() (in module lopaths.graph_utils)": [[12, "lopaths.graph_utils.find_shortest_distance"]], "find_shortest_path() (in module lopaths.graph_utils)": [[12, "lopaths.graph_utils.find_shortest_path"]], "in_sets() (in module lopaths.graph_utils)": [[12, "lopaths.graph_utils.in_sets"]], "lopaths.graph_utils": [[12, "module-lopaths.graph_utils"]], "formatvaltosigfigs() (in module lopaths.sig_fig_rounding)": [[13, "lopaths.sig_fig_rounding.FormatValToSigFigs"]], "formatvalwithuncrounding() (in module lopaths.sig_fig_rounding)": [[13, "lopaths.sig_fig_rounding.FormatValWithUncRounding"]], "roundtosigfigs_decim() (in module lopaths.sig_fig_rounding)": [[13, "lopaths.sig_fig_rounding.RoundToSigFigs_decim"]], "roundtosigfigs_fp() (in module lopaths.sig_fig_rounding)": [[13, "lopaths.sig_fig_rounding.RoundToSigFigs_fp"]], "setdecimalprecision() (in module lopaths.sig_fig_rounding)": [[13, "lopaths.sig_fig_rounding.SetDecimalPrecision"]], "valuewithuncsrounding() (in module lopaths.sig_fig_rounding)": [[13, "lopaths.sig_fig_rounding.ValueWithUncsRounding"]], "lopaths.sig_fig_rounding": [[13, "module-lopaths.sig_fig_rounding"]], "graphtester (class in lopaths.test_graph)": [[14, "lopaths.test_graph.GraphTester"]], "adjust_ticks() (in module lopaths.test_graph)": [[14, "lopaths.test_graph.adjust_ticks"]], "arrstr() (in module lopaths.test_graph)": [[14, "lopaths.test_graph.arrstr"]], "create_min_paths_graph() (in module lopaths.test_graph)": [[14, "lopaths.test_graph.create_min_paths_graph"]], "create_min_paths_graph2() (in module lopaths.test_graph)": [[14, "lopaths.test_graph.create_min_paths_graph2"]], "get_origin_destination_indices() (graphtester method)": [[14, "lopaths.test_graph.GraphTester.get_origin_destination_indices"]], "lopaths.test_graph": [[14, "module-lopaths.test_graph"]], "new() (graphtester static method)": [[14, "lopaths.test_graph.GraphTester.new"]], "preprocessing() (graphtester method)": [[14, "lopaths.test_graph.GraphTester.preprocessing"]], "save() (graphtester method)": [[14, "lopaths.test_graph.GraphTester.save"]], "split_figure_vertical() (in module lopaths.test_graph)": [[14, "lopaths.test_graph.split_figure_vertical"]], "test_revc_loc() (graphtester method)": [[14, "lopaths.test_graph.GraphTester.test_REVC_LOC"]], "test_revc_approximations() (graphtester method)": [[14, "lopaths.test_graph.GraphTester.test_REVC_approximations"]], "test_revc_once() (graphtester method)": [[14, "lopaths.test_graph.GraphTester.test_REVC_once"]], "test_revc_range() (graphtester method)": [[14, "lopaths.test_graph.GraphTester.test_REVC_range"]], "test_revc_range_avg() (graphtester method)": [[14, "lopaths.test_graph.GraphTester.test_REVC_range_avg"]], "test_revc_repetition() (graphtester method)": [[14, "lopaths.test_graph.GraphTester.test_REVC_repetition"]], "test_revc_source_sink() (graphtester method)": [[14, "lopaths.test_graph.GraphTester.test_REVC_source_sink"]], "test_revc_stretch() (graphtester method)": [[14, "lopaths.test_graph.GraphTester.test_REVC_stretch"]], "test_optimizations() (graphtester method)": [[14, "lopaths.test_graph.GraphTester.test_optimizations"]], "time_call() (in module lopaths.test_graph)": [[14, "lopaths.test_graph.time_call"]], "timing() (in module lopaths.test_graph)": [[14, "lopaths.test_graph.timing"]], "routetester (class in lopaths.test_routes)": [[15, "lopaths.test_routes.RouteTester"]], "lopaths.test_routes": [[15, "module-lopaths.test_routes"]], "new() (routetester static method)": [[15, "lopaths.test_routes.RouteTester.new"]], "save() (routetester method)": [[15, "lopaths.test_routes.RouteTester.save"]], "test_empirical_validity() (routetester method)": [[15, "lopaths.test_routes.RouteTester.test_empirical_validity"]], "processpoolexecutor (class in vemomoto_core.concurrent.concurrent_futures_ext)": [[17, "vemomoto_core.concurrent.concurrent_futures_ext.ProcessPoolExecutor"]], "get_cpu_chunk_counts() (in module vemomoto_core.concurrent.concurrent_futures_ext)": [[17, "vemomoto_core.concurrent.concurrent_futures_ext.get_cpu_chunk_counts"]], "get_shared_arrays() (processpoolexecutor method)": [[17, "vemomoto_core.concurrent.concurrent_futures_ext.ProcessPoolExecutor.get_shared_arrays"]], "map() (processpoolexecutor method)": [[17, "vemomoto_core.concurrent.concurrent_futures_ext.ProcessPoolExecutor.map"]], "vemomoto_core.concurrent.concurrent_futures_ext": [[17, "module-vemomoto_core.concurrent.concurrent_futures_ext"]], "circularparallelcounter (class in vemomoto_core.concurrent.nicepar)": [[18, "vemomoto_core.concurrent.nicepar.CircularParallelCounter"]], "counter (class in vemomoto_core.concurrent.nicepar)": [[18, "vemomoto_core.concurrent.nicepar.Counter"]], "dummyobj (class in vemomoto_core.concurrent.nicepar)": [[18, "vemomoto_core.concurrent.nicepar.DummyObj"]], "dummyvar (class in vemomoto_core.concurrent.nicepar)": [[18, "vemomoto_core.concurrent.nicepar.DummyVar"]], "lockable (class in vemomoto_core.concurrent.nicepar)": [[18, "vemomoto_core.concurrent.nicepar.Lockable"]], "locked (class in vemomoto_core.concurrent.nicepar)": [[18, "vemomoto_core.concurrent.nicepar.Locked"]], "parallelclass (class in vemomoto_core.concurrent.nicepar)": [[18, "vemomoto_core.concurrent.nicepar.ParallelClass"]], "parallelcounter (class in vemomoto_core.concurrent.nicepar)": [[18, "vemomoto_core.concurrent.nicepar.ParallelCounter"]], "sharablelistarr (class in vemomoto_core.concurrent.nicepar)": [[18, "vemomoto_core.concurrent.nicepar.SharableListArr"]], "getcounter() (in module vemomoto_core.concurrent.nicepar)": [[18, "vemomoto_core.concurrent.nicepar.getCounter"]], "next() (circularparallelcounter method)": [[18, "vemomoto_core.concurrent.nicepar.CircularParallelCounter.next"]], "next() (counter method)": [[18, "vemomoto_core.concurrent.nicepar.Counter.next"]], "next() (parallelcounter method)": [[18, "vemomoto_core.concurrent.nicepar.ParallelCounter.next"]], "parmap() (parallelclass method)": [[18, "vemomoto_core.concurrent.nicepar.ParallelClass.parmap"]], "postpone_task() (parallelclass method)": [[18, "vemomoto_core.concurrent.nicepar.ParallelClass.postpone_task"]], "reset() (circularparallelcounter method)": [[18, "vemomoto_core.concurrent.nicepar.CircularParallelCounter.reset"]], "reset() (counter method)": [[18, "vemomoto_core.concurrent.nicepar.Counter.reset"]], "reset() (parallelcounter method)": [[18, "vemomoto_core.concurrent.nicepar.ParallelCounter.reset"]], "update() (dummyobj method)": [[18, "vemomoto_core.concurrent.nicepar.DummyObj.update"]], "vemomoto_core.concurrent.nicepar": [[18, "module-vemomoto_core.concurrent.nicepar"]], "mapasyncresult (class in vemomoto_core.concurrent.sharedmem_ext)": [[19, "vemomoto_core.concurrent.sharedmem_ext.MapAsyncResult"]], "mapreduce (class in vemomoto_core.concurrent.sharedmem_ext)": [[19, "vemomoto_core.concurrent.sharedmem_ext.MapReduce"]], "fetch() (mapasyncresult method)": [[19, "vemomoto_core.concurrent.sharedmem_ext.MapAsyncResult.fetch"]], "map_async() (mapreduce method)": [[19, "vemomoto_core.concurrent.sharedmem_ext.MapReduce.map_async"]], "vemomoto_core.concurrent.sharedmem_ext": [[19, "module-vemomoto_core.concurrent.sharedmem_ext"]], "fixedorderedintdict (class in vemomoto_core.npcollections.fixedorderedintdict)": [[20, "vemomoto_core.npcollections.FixedOrderedIntDict.FixedOrderedIntDict"]], "items() (fixedorderedintdict method)": [[20, "vemomoto_core.npcollections.FixedOrderedIntDict.FixedOrderedIntDict.items"]], "key_array (fixedorderedintdict attribute)": [[20, "vemomoto_core.npcollections.FixedOrderedIntDict.FixedOrderedIntDict.key_array"]], "keys() (fixedorderedintdict method)": [[20, "vemomoto_core.npcollections.FixedOrderedIntDict.FixedOrderedIntDict.keys"]], "new() (fixedorderedintdict static method)": [[20, "vemomoto_core.npcollections.FixedOrderedIntDict.FixedOrderedIntDict.new"]], "value_array (fixedorderedintdict attribute)": [[20, "vemomoto_core.npcollections.FixedOrderedIntDict.FixedOrderedIntDict.value_array"]], "values() (fixedorderedintdict method)": [[20, "vemomoto_core.npcollections.FixedOrderedIntDict.FixedOrderedIntDict.values"]], "vemomoto_core.npcollections.fixedorderedintdict": [[20, "module-vemomoto_core.npcollections.FixedOrderedIntDict"]], "get() (intquickheapdict method)": [[21, "vemomoto_core.npcollections.intquickheapdict.intquickheapdict.get"]], "getitem() (intquickheapdict method)": [[21, "vemomoto_core.npcollections.intquickheapdict.intquickheapdict.getitem"]], "intquickheapdict (class in vemomoto_core.npcollections.intquickheapdict)": [[21, "vemomoto_core.npcollections.intquickheapdict.intquickheapdict"]], "items() (intquickheapdict method)": [[21, "vemomoto_core.npcollections.intquickheapdict.intquickheapdict.items"]], "peekitem() (intquickheapdict method)": [[21, "vemomoto_core.npcollections.intquickheapdict.intquickheapdict.peekitem"]], "popitem() (intquickheapdict method)": [[21, "vemomoto_core.npcollections.intquickheapdict.intquickheapdict.popitem"]], "setitem() (intquickheapdict method)": [[21, "vemomoto_core.npcollections.intquickheapdict.intquickheapdict.setitem"]], "vemomoto_core.npcollections.intquickheapdict": [[21, "module-vemomoto_core.npcollections.intquickheapdict"]], "flexiblearray (class in vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.FlexibleArray"]], "flexiblearraydict (class in vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDict"]], "flexiblearraydictcolumnview (class in vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDictColumnView"]], "flexiblearrayiterator (class in vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayIterator"]], "highdimaccesserror (csr_matrix_nd attribute)": [[22, "vemomoto_core.npcollections.npext.csr_matrix_nd.HighDimAccessError"]], "add() (flexiblearray method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArray.add"], [23, "vemomoto_core.npcollections.npextc.FlexibleArray.add"]], "add() (flexiblearraydict method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDict.add"]], "add() (flexiblearraydictcolumnview method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDictColumnView.add"]], "add_alias() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.add_alias"]], "add_fields() (flexiblearray method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArray.add_fields"], [23, "vemomoto_core.npcollections.npextc.FlexibleArray.add_fields"]], "add_fields() (flexiblearraydictcolumnview method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDictColumnView.add_fields"]], "add_fields() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.add_fields"]], "add_names() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.add_names"]], "as_dtype() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.as_dtype"]], "binary_ceil() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.binary_ceil"]], "binary_floor() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.binary_floor"]], "convert_r_0_1() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.convert_R_0_1"]], "convert_r_0_1_reverse() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.convert_R_0_1_reverse"]], "convert_r_pos() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.convert_R_pos"]], "convert_r_pos_reverse() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.convert_R_pos_reverse"]], "csr_list_to_csr_matrix() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.csr_list_to_csr_matrix"]], "csr_matrix_nd (class in vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.csr_matrix_nd"]], "cut() (flexiblearray method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArray.cut"], [23, "vemomoto_core.npcollections.npextc.FlexibleArray.cut"]], "exists() (flexiblearray method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArray.exists"], [23, "vemomoto_core.npcollections.npextc.FlexibleArray.exists"]], "exists() (flexiblearraydict method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDict.exists"], [23, "vemomoto_core.npcollections.npextc.FlexibleArrayDict.exists"]], "expand() (flexiblearray method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArray.expand"], [23, "vemomoto_core.npcollections.npextc.FlexibleArray.expand"]], "expand() (flexiblearraydictcolumnview method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDictColumnView.expand"]], "extend() (flexiblearray method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArray.extend"], [23, "vemomoto_core.npcollections.npextc.FlexibleArray.extend"]], "extend() (flexiblearraydict method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDict.extend"], [23, "vemomoto_core.npcollections.npextc.FlexibleArrayDict.extend"]], "extend() (flexiblearraydictcolumnview method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDictColumnView.extend"]], "fields_view() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.fields_view"]], "get() (flexiblearraydict method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDict.get"], [23, "vemomoto_core.npcollections.npextc.FlexibleArrayDict.get"]], "getcolumnview() (flexiblearraydict method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDict.getColumnView"], [23, "vemomoto_core.npcollections.npextc.FlexibleArrayDict.getColumnView"]], "get_array() (flexiblearray method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArray.get_array"], [23, "vemomoto_core.npcollections.npextc.FlexibleArray.get_array"]], "get_array_indices() (flexiblearray method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArray.get_array_indices"], [23, "vemomoto_core.npcollections.npextc.FlexibleArray.get_array_indices"]], "get_chunks() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.get_chunks"]], "get_item_count() (flexiblearraydict method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDict.get_item_count"]], "get_precision_binary_digits() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.get_precision_binary_digits"]], "in1d() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.in1d"]], "in1d2d() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.in1d2d"]], "is_contiguous() (flexiblearray method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArray.is_contiguous"], [23, "vemomoto_core.npcollections.npextc.FlexibleArray.is_contiguous"]], "list_to_csr_matrix() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.list_to_csr_matrix"]], "make_contiguous() (flexiblearray method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArray.make_contiguous"], [23, "vemomoto_core.npcollections.npextc.FlexibleArray.make_contiguous"]], "merge_arrays() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.merge_arrays"]], "new() (flexiblearraydictcolumnview static method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDictColumnView.new"], [23, "vemomoto_core.npcollections.npextc.FlexibleArrayDictColumnView.new"]], "quick_add() (flexiblearray method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArray.quick_add"]], "quick_add() (flexiblearraydict method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDict.quick_add"]], "quick_add() (flexiblearraydictcolumnview method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDictColumnView.quick_add"]], "quick_add_tuple() (flexiblearray method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArray.quick_add_tuple"]], "quick_add_tuple() (flexiblearraydict method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDict.quick_add_tuple"]], "remove_fields() (flexiblearray method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArray.remove_fields"], [23, "vemomoto_core.npcollections.npextc.FlexibleArray.remove_fields"]], "remove_fields() (flexiblearraydictcolumnview method)": [[22, "vemomoto_core.npcollections.npext.FlexibleArrayDictColumnView.remove_fields"]], "remove_fields() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.remove_fields"]], "sparsepower() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.sparsepower"]], "sparsepowersum() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.sparsepowersum"]], "sparsepowersum2d() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.sparsepowersum2D"]], "sparseprod() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.sparseprod"]], "sparsesum() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.sparsesum"]], "sparsesum_chosen() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.sparsesum_chosen"]], "sparsesum_chosen_rows() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.sparsesum_chosen_rows"]], "sparsesum_chosen_rows_fact() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.sparsesum_chosen_rows_fact"]], "sparsesum_row_prod() (in module vemomoto_core.npcollections.npext)": [[22, "vemomoto_core.npcollections.npext.sparsesum_row_prod"]], "vemomoto_core.npcollections.npext": [[22, "module-vemomoto_core.npcollections.npext"]], "flexiblearray (class in vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArray"]], "flexiblearraydict (class in vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArrayDict"]], "flexiblearraydictcolumnview (class in vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArrayDictColumnView"]], "flexiblearrayiterator (class in vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArrayIterator"]], "add_alias() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.add_alias"]], "add_by_keywords() (flexiblearray method)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArray.add_by_keywords"]], "add_names() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.add_names"]], "add_tuple() (flexiblearray method)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArray.add_tuple"]], "array (flexiblearray attribute)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArray.array"]], "changeindex (flexiblearray attribute)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArray.changeIndex"]], "considered (flexiblearray attribute)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArray.considered"]], "fields_view() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.fields_view"]], "find_next_nonzero2d() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.find_next_nonzero2d"]], "get_chunks() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.get_chunks"]], "get_common_element2d() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.get_common_element2d"]], "indexdict (flexiblearraydict attribute)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArrayDict.indexDict"]], "isrecarray (flexiblearray attribute)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArray.isRecArray"]], "isstructured (flexiblearray attribute)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArray.isStructured"]], "new() (flexiblearray static method)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArray.new"]], "new() (flexiblearraydict static method)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArrayDict.new"]], "pointer_prod() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.pointer_prod"]], "pointer_sum() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.pointer_sum"]], "pointer_sum3d() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.pointer_sum3D"]], "pointer_sum3dx() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.pointer_sum3DX"]], "pointer_sum3dy() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.pointer_sum3DY"]], "pointer_sum_chosen() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.pointer_sum_chosen"]], "pointer_sum_chosen_rows() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.pointer_sum_chosen_rows"]], "pointer_sum_chosen_rows_fact() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.pointer_sum_chosen_rows_fact"]], "pointer_sum_row_prod() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.pointer_sum_row_prod"]], "remove_fields() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.remove_fields"]], "setitem() (flexiblearray method)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArray.setitem"]], "setitem() (flexiblearraydict method)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArrayDict.setitem"]], "setitem_by_keywords() (flexiblearray method)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArray.setitem_by_keywords"]], "setitem_by_keywords() (flexiblearraydict method)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArrayDict.setitem_by_keywords"]], "setitem_flexible() (flexiblearray method)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArray.setitem_flexible"]], "setitem_flexible() (flexiblearraydict method)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArrayDict.setitem_flexible"]], "shape (flexiblearray attribute)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArray.shape"]], "size (flexiblearray attribute)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArray.size"]], "space (flexiblearray attribute)": [[23, "vemomoto_core.npcollections.npextc.FlexibleArray.space"]], "unique_tol() (in module vemomoto_core.npcollections.npextc)": [[23, "vemomoto_core.npcollections.npextc.unique_tol"]], "vemomoto_core.npcollections.npextc": [[23, "module-vemomoto_core.npcollections.npextc"]], "sparse3d (class in vemomoto_core.npcollections.sparse3d)": [[24, "vemomoto_core.npcollections.sparse3d.Sparse3D"]], "imultiply() (sparse3d method)": [[24, "vemomoto_core.npcollections.sparse3d.Sparse3D.imultiply"]], "multiply() (sparse3d method)": [[24, "vemomoto_core.npcollections.sparse3d.Sparse3D.multiply"]], "sum() (sparse3d method)": [[24, "vemomoto_core.npcollections.sparse3d.Sparse3D.sum"]], "test1() (in module vemomoto_core.npcollections.sparse3d)": [[24, "vemomoto_core.npcollections.sparse3d.test1"]], "test2() (in module vemomoto_core.npcollections.sparse3d)": [[24, "vemomoto_core.npcollections.sparse3d.test2"]], "test3() (in module vemomoto_core.npcollections.sparse3d)": [[24, "vemomoto_core.npcollections.sparse3d.test3"]], "toarray() (sparse3d method)": [[24, "vemomoto_core.npcollections.sparse3d.Sparse3D.toarray"]], "vemomoto_core.npcollections.sparse3d": [[24, "module-vemomoto_core.npcollections.sparse3d"]], "docmetasuperclass (class in vemomoto_core.tools.doc_utils)": [[25, "vemomoto_core.tools.doc_utils.DocMetaSuperclass"]], "add_parent_doc() (in module vemomoto_core.tools.doc_utils)": [[25, "vemomoto_core.tools.doc_utils.add_parent_doc"]], "adjust_indent() (in module vemomoto_core.tools.doc_utils)": [[25, "vemomoto_core.tools.doc_utils.adjust_indent"]], "get_indent() (in module vemomoto_core.tools.doc_utils)": [[25, "vemomoto_core.tools.doc_utils.get_indent"]], "get_indent_multi() (in module vemomoto_core.tools.doc_utils)": [[25, "vemomoto_core.tools.doc_utils.get_indent_multi"]], "inherit_doc() (in module vemomoto_core.tools.doc_utils)": [[25, "vemomoto_core.tools.doc_utils.inherit_doc"]], "merge() (in module vemomoto_core.tools.doc_utils)": [[25, "vemomoto_core.tools.doc_utils.merge"]], "should_append() (in module vemomoto_core.tools.doc_utils)": [[25, "vemomoto_core.tools.doc_utils.should_append"]], "should_ignore() (in module vemomoto_core.tools.doc_utils)": [[25, "vemomoto_core.tools.doc_utils.should_ignore"]], "should_insert() (in module vemomoto_core.tools.doc_utils)": [[25, "vemomoto_core.tools.doc_utils.should_insert"]], "split_variables_numpy() (in module vemomoto_core.tools.doc_utils)": [[25, "vemomoto_core.tools.doc_utils.split_variables_numpy"]], "staticmethod_inherit_doc() (in module vemomoto_core.tools.doc_utils)": [[25, "vemomoto_core.tools.doc_utils.staticmethod_inherit_doc"]], "strip_lines() (in module vemomoto_core.tools.doc_utils)": [[25, "vemomoto_core.tools.doc_utils.strip_lines"]], "strip_private() (in module vemomoto_core.tools.doc_utils)": [[25, "vemomoto_core.tools.doc_utils.strip_private"]], "vemomoto_core.tools.doc_utils": [[25, "module-vemomoto_core.tools.doc_utils"]], "hierarchichalprinter (class in vemomoto_core.tools.hrprint)": [[26, "vemomoto_core.tools.hrprint.HierarchichalPrinter"]], "decrease_print_level() (hierarchichalprinter method)": [[26, "vemomoto_core.tools.hrprint.HierarchichalPrinter.decrease_print_level"]], "get_parent_printer() (hierarchichalprinter method)": [[26, "vemomoto_core.tools.hrprint.HierarchichalPrinter.get_parent_printer"]], "get_print_level() (hierarchichalprinter method)": [[26, "vemomoto_core.tools.hrprint.HierarchichalPrinter.get_print_level"]], "get_silent_status() (hierarchichalprinter method)": [[26, "vemomoto_core.tools.hrprint.HierarchichalPrinter.get_silent_status"]], "increase_print_level() (hierarchichalprinter method)": [[26, "vemomoto_core.tools.hrprint.HierarchichalPrinter.increase_print_level"]], "inherit_print_level() (hierarchichalprinter method)": [[26, "vemomoto_core.tools.hrprint.HierarchichalPrinter.inherit_print_level"]], "inherit_silent_status() (hierarchichalprinter method)": [[26, "vemomoto_core.tools.hrprint.HierarchichalPrinter.inherit_silent_status"]], "print_status() (hierarchichalprinter method)": [[26, "vemomoto_core.tools.hrprint.HierarchichalPrinter.print_status"]], "prst() (hierarchichalprinter method)": [[26, "vemomoto_core.tools.hrprint.HierarchichalPrinter.prst"]], "set_parent_printer() (hierarchichalprinter method)": [[26, "vemomoto_core.tools.hrprint.HierarchichalPrinter.set_parent_printer"]], "set_print_level() (hierarchichalprinter method)": [[26, "vemomoto_core.tools.hrprint.HierarchichalPrinter.set_print_level"]], "set_silent_status() (hierarchichalprinter method)": [[26, "vemomoto_core.tools.hrprint.HierarchichalPrinter.set_silent_status"]], "vemomoto_core.tools.hrprint": [[26, "module-vemomoto_core.tools.hrprint"]], "dictiterator (class in vemomoto_core.tools.iterext)": [[27, "vemomoto_core.tools.iterext.DictIterator"]], "emptylist (class in vemomoto_core.tools.iterext)": [[27, "vemomoto_core.tools.iterext.EmptyList"]], "repeater (class in vemomoto_core.tools.iterext)": [[27, "vemomoto_core.tools.iterext.Repeater"]], "vemomoto_core.tools.iterext": [[27, "module-vemomoto_core.tools.iterext"]], "blocksize (in module vemomoto_core.tools.saveobject)": [[28, "vemomoto_core.tools.saveobject.BLOCKSIZE"]], "default_extension (in module vemomoto_core.tools.saveobject)": [[28, "vemomoto_core.tools.saveobject.DEFAULT_EXTENSION"]], "default_folder_extension (in module vemomoto_core.tools.saveobject)": [[28, "vemomoto_core.tools.saveobject.DEFAULT_FOLDER_EXTENSION"]], "separatelysaveable (class in vemomoto_core.tools.saveobject)": [[28, "vemomoto_core.tools.saveobject.SeparatelySaveable"]], "del_save_separately() (separatelysaveable method)": [[28, "vemomoto_core.tools.saveobject.SeparatelySaveable.del_save_separately"]], "hasattr() (separatelysaveable method)": [[28, "vemomoto_core.tools.saveobject.SeparatelySaveable.hasattr"]], "load_all() (separatelysaveable method)": [[28, "vemomoto_core.tools.saveobject.SeparatelySaveable.load_all"]], "load_object() (in module vemomoto_core.tools.saveobject)": [[28, "vemomoto_core.tools.saveobject.load_object"]], "save_object() (separatelysaveable method)": [[28, "vemomoto_core.tools.saveobject.SeparatelySaveable.save_object"]], "save_object() (in module vemomoto_core.tools.saveobject)": [[28, "vemomoto_core.tools.saveobject.save_object"]], "set_save_separately() (separatelysaveable method)": [[28, "vemomoto_core.tools.saveobject.SeparatelySaveable.set_save_separately"]], "vemomoto_core.tools.saveobject": [[28, "module-vemomoto_core.tools.saveobject"]], "profile() (in module vemomoto_core.tools.simprofile)": [[29, "vemomoto_core.tools.simprofile.profile"]], "vemomoto_core.tools.simprofile": [[29, "module-vemomoto_core.tools.simprofile"]], "tee (class in vemomoto_core.tools.tee)": [[30, "vemomoto_core.tools.tee.Tee"]], "writer (class in vemomoto_core.tools.tee)": [[30, "vemomoto_core.tools.tee.Writer"]], "flush() (writer method)": [[30, "vemomoto_core.tools.tee.Writer.flush"]], "vemomoto_core.tools.tee": [[30, "module-vemomoto_core.tools.tee"]], "write() (writer method)": [[30, "vemomoto_core.tools.tee.Writer.write"]]}})